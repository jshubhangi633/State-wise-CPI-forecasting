{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOhReuGJeYb5bKAWnbPU3Xs",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jshubhangi633/State-wise-CPI-forecasting/blob/main/Untitled24.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **State wise CPI Forecasting using Time Series**\n"
      ],
      "metadata": {
        "id": "qiX-DawQXcwZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Installing libraries\n"
      ],
      "metadata": {
        "id": "lUd_oXK-XnJg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "maIYI7q21ON7"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set_style(\"darkgrid\")"
      ],
      "metadata": {
        "id": "H0RdK5th1Rbl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import sklearn\n",
        "from sklearn.metrics import mean_squared_error"
      ],
      "metadata": {
        "id": "PuGRan2t1dr2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Read and understand the data**"
      ],
      "metadata": {
        "id": "q47DoCSGXuHi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "data = pd.read_csv(\"/content/Statewise_General_Index_Upto_Feb24 x.csv\")"
      ],
      "metadata": {
        "id": "lTk6cSbf1iw9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "Okc4-ImG1lBW",
        "outputId": "839a28ec-dbfc-4ac2-df9e-7894b61ca077"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Sector  Year      Name  Andhra Pradesh  Arunachal Pradesh  Assam  Bihar  \\\n",
              "0  Rural  2011   January           104.0                NaN  104.0    NaN   \n",
              "1  Urban  2011   January           103.0                NaN  103.0    NaN   \n",
              "2  Rural  2011  February           107.0                NaN  105.0    NaN   \n",
              "3  Urban  2011  February           106.0                NaN  106.0    NaN   \n",
              "4  Rural  2011     March           103.1                NaN  103.8    NaN   \n",
              "\n",
              "   Chattisgarh  Delhi    Goa  ...  Uttar Pradesh  Uttarakhand  West Bengal  \\\n",
              "0        105.0    NaN  103.0  ...          103.0          NaN        104.0   \n",
              "1        104.0    NaN  103.0  ...          103.0          NaN        104.0   \n",
              "2        107.0    NaN  105.0  ...          104.0          NaN        107.0   \n",
              "3        106.0    NaN  105.0  ...          105.0          NaN        108.0   \n",
              "4        103.9    NaN  103.9  ...          103.9          NaN        104.8   \n",
              "\n",
              "   Andaman and Nicobar  Chandigarh  Dadra and Nagar Haveli  Daman and Diu  \\\n",
              "0                105.0       104.0                   104.0          103.0   \n",
              "1                105.0       103.0                   104.0          103.0   \n",
              "2                105.0       104.0                   107.0          104.0   \n",
              "3                104.0       103.0                   106.0          104.0   \n",
              "4                106.8       103.9                   105.8          104.1   \n",
              "\n",
              "   Jammu and Kashmir  Lakshadweep  Puducherry  \n",
              "0              104.0        103.0       106.0  \n",
              "1              104.0        102.0       105.0  \n",
              "2              105.0        104.0       107.0  \n",
              "3              105.0        105.0       108.0  \n",
              "4              105.5        108.6       104.7  \n",
              "\n",
              "[5 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-041c8ef9-9850-4de4-aa06-bae5092e0fb8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sector</th>\n",
              "      <th>Year</th>\n",
              "      <th>Name</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "      <th>Arunachal Pradesh</th>\n",
              "      <th>Assam</th>\n",
              "      <th>Bihar</th>\n",
              "      <th>Chattisgarh</th>\n",
              "      <th>Delhi</th>\n",
              "      <th>Goa</th>\n",
              "      <th>...</th>\n",
              "      <th>Uttar Pradesh</th>\n",
              "      <th>Uttarakhand</th>\n",
              "      <th>West Bengal</th>\n",
              "      <th>Andaman and Nicobar</th>\n",
              "      <th>Chandigarh</th>\n",
              "      <th>Dadra and Nagar Haveli</th>\n",
              "      <th>Daman and Diu</th>\n",
              "      <th>Jammu and Kashmir</th>\n",
              "      <th>Lakshadweep</th>\n",
              "      <th>Puducherry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>January</td>\n",
              "      <td>104.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>104.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>103.0</td>\n",
              "      <td>...</td>\n",
              "      <td>103.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>104.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>106.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2011</td>\n",
              "      <td>January</td>\n",
              "      <td>103.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>103.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>104.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>103.0</td>\n",
              "      <td>...</td>\n",
              "      <td>103.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>104.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>105.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>February</td>\n",
              "      <td>107.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>107.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105.0</td>\n",
              "      <td>...</td>\n",
              "      <td>104.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>107.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>107.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>107.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2011</td>\n",
              "      <td>February</td>\n",
              "      <td>106.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>106.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>106.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105.0</td>\n",
              "      <td>...</td>\n",
              "      <td>105.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>108.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>108.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>March</td>\n",
              "      <td>103.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>103.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>103.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>103.9</td>\n",
              "      <td>...</td>\n",
              "      <td>103.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>104.8</td>\n",
              "      <td>106.8</td>\n",
              "      <td>103.9</td>\n",
              "      <td>105.8</td>\n",
              "      <td>104.1</td>\n",
              "      <td>105.5</td>\n",
              "      <td>108.6</td>\n",
              "      <td>104.7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 39 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-041c8ef9-9850-4de4-aa06-bae5092e0fb8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-041c8ef9-9850-4de4-aa06-bae5092e0fb8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-041c8ef9-9850-4de4-aa06-bae5092e0fb8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a3a3d386-44b7-45fd-bf1a-867def9e93f2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3a3d386-44b7-45fd-bf1a-867def9e93f2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a3a3d386-44b7-45fd-bf1a-867def9e93f2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "bSl6t9991wU_",
        "outputId": "0d22b5ad-212a-4366-db7e-b9ccc6369ac1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Sector  Year      Name  Andhra Pradesh  Arunachal Pradesh  Assam  Bihar  \\\n",
              "263  Urban  2022   January           170.3                NaN  167.0  167.6   \n",
              "264  Rural  2022  February           167.2              174.0  168.6  162.0   \n",
              "265  Urban  2022  February           170.9                NaN  167.1  168.0   \n",
              "266  Rural  2022     March           169.6              174.5  171.0  164.2   \n",
              "267  Urban  2022     March           173.1                NaN  168.0  169.9   \n",
              "\n",
              "     Chattisgarh  Delhi    Goa  ...  Uttar Pradesh  Uttarakhand  West Bengal  \\\n",
              "263        162.7  159.1  162.0  ...          165.0        163.9        171.1   \n",
              "264        164.8  159.8  169.3  ...          163.9        164.0        173.0   \n",
              "265        162.5  159.4  162.2  ...          165.2        164.0        173.6   \n",
              "266        165.7  160.9  168.7  ...          166.5        165.2        175.8   \n",
              "267        163.0  160.1  162.9  ...          166.5        164.6        173.4   \n",
              "\n",
              "     Andaman and Nicobar  Chandigarh  Dadra and Nagar Haveli  Daman and Diu  \\\n",
              "263                168.1       156.2                   160.1          164.4   \n",
              "264                182.3       167.0                   154.0          169.8   \n",
              "265                166.0       157.0                   160.9          164.3   \n",
              "266                181.9       166.8                   153.5          170.9   \n",
              "267                167.4       157.7                   161.7          166.0   \n",
              "\n",
              "     Jammu and Kashmir  Lakshadweep  Puducherry  \n",
              "263              174.4        157.7       170.7  \n",
              "264              177.4        176.9       172.5  \n",
              "265              176.3        154.8       172.1  \n",
              "266              179.1        176.7       173.2  \n",
              "267              176.9        158.4       172.2  \n",
              "\n",
              "[5 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d60ec257-cc1f-4e92-aa8a-c801a1d35c8c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sector</th>\n",
              "      <th>Year</th>\n",
              "      <th>Name</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "      <th>Arunachal Pradesh</th>\n",
              "      <th>Assam</th>\n",
              "      <th>Bihar</th>\n",
              "      <th>Chattisgarh</th>\n",
              "      <th>Delhi</th>\n",
              "      <th>Goa</th>\n",
              "      <th>...</th>\n",
              "      <th>Uttar Pradesh</th>\n",
              "      <th>Uttarakhand</th>\n",
              "      <th>West Bengal</th>\n",
              "      <th>Andaman and Nicobar</th>\n",
              "      <th>Chandigarh</th>\n",
              "      <th>Dadra and Nagar Haveli</th>\n",
              "      <th>Daman and Diu</th>\n",
              "      <th>Jammu and Kashmir</th>\n",
              "      <th>Lakshadweep</th>\n",
              "      <th>Puducherry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>263</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2022</td>\n",
              "      <td>January</td>\n",
              "      <td>170.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>167.0</td>\n",
              "      <td>167.6</td>\n",
              "      <td>162.7</td>\n",
              "      <td>159.1</td>\n",
              "      <td>162.0</td>\n",
              "      <td>...</td>\n",
              "      <td>165.0</td>\n",
              "      <td>163.9</td>\n",
              "      <td>171.1</td>\n",
              "      <td>168.1</td>\n",
              "      <td>156.2</td>\n",
              "      <td>160.1</td>\n",
              "      <td>164.4</td>\n",
              "      <td>174.4</td>\n",
              "      <td>157.7</td>\n",
              "      <td>170.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>264</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2022</td>\n",
              "      <td>February</td>\n",
              "      <td>167.2</td>\n",
              "      <td>174.0</td>\n",
              "      <td>168.6</td>\n",
              "      <td>162.0</td>\n",
              "      <td>164.8</td>\n",
              "      <td>159.8</td>\n",
              "      <td>169.3</td>\n",
              "      <td>...</td>\n",
              "      <td>163.9</td>\n",
              "      <td>164.0</td>\n",
              "      <td>173.0</td>\n",
              "      <td>182.3</td>\n",
              "      <td>167.0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>169.8</td>\n",
              "      <td>177.4</td>\n",
              "      <td>176.9</td>\n",
              "      <td>172.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>265</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2022</td>\n",
              "      <td>February</td>\n",
              "      <td>170.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>167.1</td>\n",
              "      <td>168.0</td>\n",
              "      <td>162.5</td>\n",
              "      <td>159.4</td>\n",
              "      <td>162.2</td>\n",
              "      <td>...</td>\n",
              "      <td>165.2</td>\n",
              "      <td>164.0</td>\n",
              "      <td>173.6</td>\n",
              "      <td>166.0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>160.9</td>\n",
              "      <td>164.3</td>\n",
              "      <td>176.3</td>\n",
              "      <td>154.8</td>\n",
              "      <td>172.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2022</td>\n",
              "      <td>March</td>\n",
              "      <td>169.6</td>\n",
              "      <td>174.5</td>\n",
              "      <td>171.0</td>\n",
              "      <td>164.2</td>\n",
              "      <td>165.7</td>\n",
              "      <td>160.9</td>\n",
              "      <td>168.7</td>\n",
              "      <td>...</td>\n",
              "      <td>166.5</td>\n",
              "      <td>165.2</td>\n",
              "      <td>175.8</td>\n",
              "      <td>181.9</td>\n",
              "      <td>166.8</td>\n",
              "      <td>153.5</td>\n",
              "      <td>170.9</td>\n",
              "      <td>179.1</td>\n",
              "      <td>176.7</td>\n",
              "      <td>173.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>267</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2022</td>\n",
              "      <td>March</td>\n",
              "      <td>173.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>168.0</td>\n",
              "      <td>169.9</td>\n",
              "      <td>163.0</td>\n",
              "      <td>160.1</td>\n",
              "      <td>162.9</td>\n",
              "      <td>...</td>\n",
              "      <td>166.5</td>\n",
              "      <td>164.6</td>\n",
              "      <td>173.4</td>\n",
              "      <td>167.4</td>\n",
              "      <td>157.7</td>\n",
              "      <td>161.7</td>\n",
              "      <td>166.0</td>\n",
              "      <td>176.9</td>\n",
              "      <td>158.4</td>\n",
              "      <td>172.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 39 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d60ec257-cc1f-4e92-aa8a-c801a1d35c8c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d60ec257-cc1f-4e92-aa8a-c801a1d35c8c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d60ec257-cc1f-4e92-aa8a-c801a1d35c8c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-dccea2a5-d00b-43b7-82de-f6a782a2189d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dccea2a5-d00b-43b7-82de-f6a782a2189d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-dccea2a5-d00b-43b7-82de-f6a782a2189d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_9nbFiFb10El",
        "outputId": "ebc85f68-dda7-4e1d-e74e-75e146fb8623"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(268, 39)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap = data[['Sector','Year','Name','Andhra Pradesh']]"
      ],
      "metadata": {
        "id": "Fd5awJWz15-p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Check the overall information and statistics of the data**"
      ],
      "metadata": {
        "id": "f9TBRMvyYR6s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "iKvltiAs19uW",
        "outputId": "31ed915a-c5b5-45e5-9eed-3fa40a6bfcc5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Year  Andhra Pradesh\n",
              "count   268.000000      262.000000\n",
              "mean   2016.111940      135.543588\n",
              "std       3.258318       17.581006\n",
              "min    2011.000000        3.640000\n",
              "25%    2013.000000      126.600000\n",
              "50%    2016.000000      136.600000\n",
              "75%    2019.000000      143.425000\n",
              "max    2022.000000      173.100000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-94430610-ebf0-44a6-ad2b-efc8b31e3ca6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>268.000000</td>\n",
              "      <td>262.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2016.111940</td>\n",
              "      <td>135.543588</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.258318</td>\n",
              "      <td>17.581006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2011.000000</td>\n",
              "      <td>3.640000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2013.000000</td>\n",
              "      <td>126.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2016.000000</td>\n",
              "      <td>136.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2019.000000</td>\n",
              "      <td>143.425000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2022.000000</td>\n",
              "      <td>173.100000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94430610-ebf0-44a6-ad2b-efc8b31e3ca6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-94430610-ebf0-44a6-ad2b-efc8b31e3ca6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-94430610-ebf0-44a6-ad2b-efc8b31e3ca6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b1aa94d9-755a-4560-b09b-64d23ecd384c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b1aa94d9-755a-4560-b09b-64d23ecd384c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b1aa94d9-755a-4560-b09b-64d23ecd384c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data_ap\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 873.4054954831956,\n        \"min\": 3.2583179589346316,\n        \"max\": 2022.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2016.1119402985075,\n          2016.0,\n          268.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 82.75366412867317,\n        \"min\": 3.64,\n        \"max\": 262.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          135.54358778625954,\n          136.6,\n          262.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Exploratory Data Analysis**"
      ],
      "metadata": {
        "id": "e2ubja80YdHg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Missing Values"
      ],
      "metadata": {
        "id": "uIxXwhg9YlF4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "4AsaUDJU2BUB",
        "outputId": "11accf38-8021-4c3e-c670-5f4119785d10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Sector            0\n",
              "Year              0\n",
              "Name              0\n",
              "Andhra Pradesh    6\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Sector</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Andhra Pradesh</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe(percentiles=[.25,.5,.75,.90,.95,.99])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "NjT0EfXp2F5i",
        "outputId": "56c980a6-2f99-4080-88c7-fb7049fa5938"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Year  Andhra Pradesh  Arunachal Pradesh       Assam       Bihar  \\\n",
              "count   268.000000      262.000000          21.000000  262.000000   32.000000   \n",
              "mean   2016.111940      135.543588         160.183810  134.157137  156.963125   \n",
              "std       3.258318       17.581006          37.046561   18.231076   28.748072   \n",
              "min    2011.000000        3.640000           0.060000    0.790000    1.620000   \n",
              "25%    2013.000000      126.600000         163.700000  124.025000  158.700000   \n",
              "50%    2016.000000      136.600000         168.200000  130.850000  162.250000   \n",
              "75%    2019.000000      143.425000         172.900000  144.350000  165.475000   \n",
              "90%    2021.000000      160.560000         174.000000  160.020000  167.960000   \n",
              "95%    2021.000000      166.085000         174.100000  166.665000  169.080000   \n",
              "99%    2022.000000      170.534000         174.420000  170.434000  169.714000   \n",
              "max    2022.000000      173.100000         174.500000  171.700000  169.900000   \n",
              "\n",
              "       Chattisgarh       Delhi         Goa     Gujarat     Haryana  ...  \\\n",
              "count   262.000000   32.000000  262.000000  262.000000  262.000000  ...   \n",
              "mean    134.608244  151.941875  135.324046  133.183359  130.983893  ...   \n",
              "std      16.951797   27.081997   19.112065   16.064853   15.863701  ...   \n",
              "min       1.220000    5.640000    0.250000    6.820000    3.350000  ...   \n",
              "25%     124.800000  153.675000  123.400000  123.525000  121.525000  ...   \n",
              "50%     136.150000  156.900000  134.450000  133.000000  130.950000  ...   \n",
              "75%     143.400000  159.425000  148.275000  141.600000  138.375000  ...   \n",
              "90%     155.590000  160.070000  161.480000  155.790000  151.980000  ...   \n",
              "95%     161.285000  160.735000  166.185000  158.900000  157.750000  ...   \n",
              "99%     165.073000  168.904000  170.317000  162.478000  162.317000  ...   \n",
              "max     166.100000  172.500000  172.600000  164.400000  163.700000  ...   \n",
              "\n",
              "       Uttar Pradesh  Uttarakhand  West Bengal  Andaman and Nicobar  \\\n",
              "count     262.000000    32.000000   258.000000           262.000000   \n",
              "mean      130.665954   155.654063   135.614961           135.499542   \n",
              "std        17.234987    28.539098    18.482969            21.420002   \n",
              "min         9.540000     0.730000     7.200000             0.070000   \n",
              "25%       120.025000   156.900000   124.800000           120.700000   \n",
              "50%       129.000000   161.700000   133.700000           132.850000   \n",
              "75%       138.400000   163.825000   145.500000           148.225000   \n",
              "90%       156.130000   165.140000   164.520000           166.630000   \n",
              "95%       162.055000   165.535000   167.260000           170.695000   \n",
              "99%       165.512000   166.045000   173.172000           182.924000   \n",
              "max       166.500000   166.200000   175.800000           188.100000   \n",
              "\n",
              "       Chandigarh  Dadra and Nagar Haveli  Daman and Diu  Jammu and Kashmir  \\\n",
              "count  262.000000              262.000000     262.000000         262.000000   \n",
              "mean   132.090954              129.761336     136.916183         136.362519   \n",
              "std     17.089127               17.700427      19.540110          19.906149   \n",
              "min      0.340000                0.040000       0.020000           0.720000   \n",
              "25%    121.125000              119.150000     124.925000         123.300000   \n",
              "50%    131.750000              128.400000     136.450000         135.050000   \n",
              "75%    142.050000              139.375000     150.175000         149.575000   \n",
              "90%    153.480000              153.980000     162.690000         164.590000   \n",
              "95%    157.680000              160.890000     164.395000         171.700000   \n",
              "99%    167.234000              171.273000     170.595000         176.839000   \n",
              "max    169.800000              177.500000     171.700000         179.100000   \n",
              "\n",
              "       Lakshadweep  Puducherry  \n",
              "count   262.000000  262.000000  \n",
              "mean    131.627405  137.146565  \n",
              "std      19.446692   18.526472  \n",
              "min       0.010000    0.270000  \n",
              "25%     119.025000  128.675000  \n",
              "50%     128.750000  136.450000  \n",
              "75%     139.975000  145.050000  \n",
              "90%     160.360000  163.500000  \n",
              "95%     167.400000  168.780000  \n",
              "99%     178.273000  173.078000  \n",
              "max     180.600000  174.000000  \n",
              "\n",
              "[11 rows x 37 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a537eb19-029d-4eab-b3ad-6621857efa72\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "      <th>Arunachal Pradesh</th>\n",
              "      <th>Assam</th>\n",
              "      <th>Bihar</th>\n",
              "      <th>Chattisgarh</th>\n",
              "      <th>Delhi</th>\n",
              "      <th>Goa</th>\n",
              "      <th>Gujarat</th>\n",
              "      <th>Haryana</th>\n",
              "      <th>...</th>\n",
              "      <th>Uttar Pradesh</th>\n",
              "      <th>Uttarakhand</th>\n",
              "      <th>West Bengal</th>\n",
              "      <th>Andaman and Nicobar</th>\n",
              "      <th>Chandigarh</th>\n",
              "      <th>Dadra and Nagar Haveli</th>\n",
              "      <th>Daman and Diu</th>\n",
              "      <th>Jammu and Kashmir</th>\n",
              "      <th>Lakshadweep</th>\n",
              "      <th>Puducherry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>268.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>258.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "      <td>262.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2016.111940</td>\n",
              "      <td>135.543588</td>\n",
              "      <td>160.183810</td>\n",
              "      <td>134.157137</td>\n",
              "      <td>156.963125</td>\n",
              "      <td>134.608244</td>\n",
              "      <td>151.941875</td>\n",
              "      <td>135.324046</td>\n",
              "      <td>133.183359</td>\n",
              "      <td>130.983893</td>\n",
              "      <td>...</td>\n",
              "      <td>130.665954</td>\n",
              "      <td>155.654063</td>\n",
              "      <td>135.614961</td>\n",
              "      <td>135.499542</td>\n",
              "      <td>132.090954</td>\n",
              "      <td>129.761336</td>\n",
              "      <td>136.916183</td>\n",
              "      <td>136.362519</td>\n",
              "      <td>131.627405</td>\n",
              "      <td>137.146565</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.258318</td>\n",
              "      <td>17.581006</td>\n",
              "      <td>37.046561</td>\n",
              "      <td>18.231076</td>\n",
              "      <td>28.748072</td>\n",
              "      <td>16.951797</td>\n",
              "      <td>27.081997</td>\n",
              "      <td>19.112065</td>\n",
              "      <td>16.064853</td>\n",
              "      <td>15.863701</td>\n",
              "      <td>...</td>\n",
              "      <td>17.234987</td>\n",
              "      <td>28.539098</td>\n",
              "      <td>18.482969</td>\n",
              "      <td>21.420002</td>\n",
              "      <td>17.089127</td>\n",
              "      <td>17.700427</td>\n",
              "      <td>19.540110</td>\n",
              "      <td>19.906149</td>\n",
              "      <td>19.446692</td>\n",
              "      <td>18.526472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2011.000000</td>\n",
              "      <td>3.640000</td>\n",
              "      <td>0.060000</td>\n",
              "      <td>0.790000</td>\n",
              "      <td>1.620000</td>\n",
              "      <td>1.220000</td>\n",
              "      <td>5.640000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>6.820000</td>\n",
              "      <td>3.350000</td>\n",
              "      <td>...</td>\n",
              "      <td>9.540000</td>\n",
              "      <td>0.730000</td>\n",
              "      <td>7.200000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>0.340000</td>\n",
              "      <td>0.040000</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.720000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.270000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2013.000000</td>\n",
              "      <td>126.600000</td>\n",
              "      <td>163.700000</td>\n",
              "      <td>124.025000</td>\n",
              "      <td>158.700000</td>\n",
              "      <td>124.800000</td>\n",
              "      <td>153.675000</td>\n",
              "      <td>123.400000</td>\n",
              "      <td>123.525000</td>\n",
              "      <td>121.525000</td>\n",
              "      <td>...</td>\n",
              "      <td>120.025000</td>\n",
              "      <td>156.900000</td>\n",
              "      <td>124.800000</td>\n",
              "      <td>120.700000</td>\n",
              "      <td>121.125000</td>\n",
              "      <td>119.150000</td>\n",
              "      <td>124.925000</td>\n",
              "      <td>123.300000</td>\n",
              "      <td>119.025000</td>\n",
              "      <td>128.675000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2016.000000</td>\n",
              "      <td>136.600000</td>\n",
              "      <td>168.200000</td>\n",
              "      <td>130.850000</td>\n",
              "      <td>162.250000</td>\n",
              "      <td>136.150000</td>\n",
              "      <td>156.900000</td>\n",
              "      <td>134.450000</td>\n",
              "      <td>133.000000</td>\n",
              "      <td>130.950000</td>\n",
              "      <td>...</td>\n",
              "      <td>129.000000</td>\n",
              "      <td>161.700000</td>\n",
              "      <td>133.700000</td>\n",
              "      <td>132.850000</td>\n",
              "      <td>131.750000</td>\n",
              "      <td>128.400000</td>\n",
              "      <td>136.450000</td>\n",
              "      <td>135.050000</td>\n",
              "      <td>128.750000</td>\n",
              "      <td>136.450000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2019.000000</td>\n",
              "      <td>143.425000</td>\n",
              "      <td>172.900000</td>\n",
              "      <td>144.350000</td>\n",
              "      <td>165.475000</td>\n",
              "      <td>143.400000</td>\n",
              "      <td>159.425000</td>\n",
              "      <td>148.275000</td>\n",
              "      <td>141.600000</td>\n",
              "      <td>138.375000</td>\n",
              "      <td>...</td>\n",
              "      <td>138.400000</td>\n",
              "      <td>163.825000</td>\n",
              "      <td>145.500000</td>\n",
              "      <td>148.225000</td>\n",
              "      <td>142.050000</td>\n",
              "      <td>139.375000</td>\n",
              "      <td>150.175000</td>\n",
              "      <td>149.575000</td>\n",
              "      <td>139.975000</td>\n",
              "      <td>145.050000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90%</th>\n",
              "      <td>2021.000000</td>\n",
              "      <td>160.560000</td>\n",
              "      <td>174.000000</td>\n",
              "      <td>160.020000</td>\n",
              "      <td>167.960000</td>\n",
              "      <td>155.590000</td>\n",
              "      <td>160.070000</td>\n",
              "      <td>161.480000</td>\n",
              "      <td>155.790000</td>\n",
              "      <td>151.980000</td>\n",
              "      <td>...</td>\n",
              "      <td>156.130000</td>\n",
              "      <td>165.140000</td>\n",
              "      <td>164.520000</td>\n",
              "      <td>166.630000</td>\n",
              "      <td>153.480000</td>\n",
              "      <td>153.980000</td>\n",
              "      <td>162.690000</td>\n",
              "      <td>164.590000</td>\n",
              "      <td>160.360000</td>\n",
              "      <td>163.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95%</th>\n",
              "      <td>2021.000000</td>\n",
              "      <td>166.085000</td>\n",
              "      <td>174.100000</td>\n",
              "      <td>166.665000</td>\n",
              "      <td>169.080000</td>\n",
              "      <td>161.285000</td>\n",
              "      <td>160.735000</td>\n",
              "      <td>166.185000</td>\n",
              "      <td>158.900000</td>\n",
              "      <td>157.750000</td>\n",
              "      <td>...</td>\n",
              "      <td>162.055000</td>\n",
              "      <td>165.535000</td>\n",
              "      <td>167.260000</td>\n",
              "      <td>170.695000</td>\n",
              "      <td>157.680000</td>\n",
              "      <td>160.890000</td>\n",
              "      <td>164.395000</td>\n",
              "      <td>171.700000</td>\n",
              "      <td>167.400000</td>\n",
              "      <td>168.780000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99%</th>\n",
              "      <td>2022.000000</td>\n",
              "      <td>170.534000</td>\n",
              "      <td>174.420000</td>\n",
              "      <td>170.434000</td>\n",
              "      <td>169.714000</td>\n",
              "      <td>165.073000</td>\n",
              "      <td>168.904000</td>\n",
              "      <td>170.317000</td>\n",
              "      <td>162.478000</td>\n",
              "      <td>162.317000</td>\n",
              "      <td>...</td>\n",
              "      <td>165.512000</td>\n",
              "      <td>166.045000</td>\n",
              "      <td>173.172000</td>\n",
              "      <td>182.924000</td>\n",
              "      <td>167.234000</td>\n",
              "      <td>171.273000</td>\n",
              "      <td>170.595000</td>\n",
              "      <td>176.839000</td>\n",
              "      <td>178.273000</td>\n",
              "      <td>173.078000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2022.000000</td>\n",
              "      <td>173.100000</td>\n",
              "      <td>174.500000</td>\n",
              "      <td>171.700000</td>\n",
              "      <td>169.900000</td>\n",
              "      <td>166.100000</td>\n",
              "      <td>172.500000</td>\n",
              "      <td>172.600000</td>\n",
              "      <td>164.400000</td>\n",
              "      <td>163.700000</td>\n",
              "      <td>...</td>\n",
              "      <td>166.500000</td>\n",
              "      <td>166.200000</td>\n",
              "      <td>175.800000</td>\n",
              "      <td>188.100000</td>\n",
              "      <td>169.800000</td>\n",
              "      <td>177.500000</td>\n",
              "      <td>171.700000</td>\n",
              "      <td>179.100000</td>\n",
              "      <td>180.600000</td>\n",
              "      <td>174.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>11 rows × 37 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a537eb19-029d-4eab-b3ad-6621857efa72')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a537eb19-029d-4eab-b3ad-6621857efa72 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a537eb19-029d-4eab-b3ad-6621857efa72');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-24c47609-56fb-45f8-959b-f99132b266d2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24c47609-56fb-45f8-959b-f99132b266d2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-24c47609-56fb-45f8-959b-f99132b266d2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "sns.boxplot(data['Andhra Pradesh'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "jLWO6wcr2LBw",
        "outputId": "f02a96a6-ae0c-4479-b368-ecb7cf63932b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Since the right most extreme values are close to the cutoff, we only focus on the left extreme outlier\n"
      ],
      "metadata": {
        "id": "wtjVeIy7YzYg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap[data_ap['Andhra Pradesh'] < 10]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "id": "29U9qMCI2WUu",
        "outputId": "82f8ea00-5c3b-48bb-d2ec-03d7ca4056a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Sector  Year      Name  Andhra Pradesh\n",
              "259  Urban  2021  November            3.64"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a46ecc6-dfa7-4f12-bdcf-e28011da4a62\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sector</th>\n",
              "      <th>Year</th>\n",
              "      <th>Name</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>259</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2021</td>\n",
              "      <td>November</td>\n",
              "      <td>3.64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a46ecc6-dfa7-4f12-bdcf-e28011da4a62')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3a46ecc6-dfa7-4f12-bdcf-e28011da4a62 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3a46ecc6-dfa7-4f12-bdcf-e28011da4a62');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data_ap[data_ap['Andhra Pradesh'] < 10]\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2021,\n        \"max\": 2021,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"November\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.64,\n        \"max\": 3.64,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.loc[257:261]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "E2J6NFDF2b0k",
        "outputId": "9e8e3ae9-a3d5-4fd9-c7a7-02d268a0b623"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Sector  Year      Name  Andhra Pradesh\n",
              "257  Urban  2021   October          169.40\n",
              "258  Rural  2021  November          168.90\n",
              "259  Urban  2021  November            3.64\n",
              "260  Rural  2021  December          169.20\n",
              "261  Urban  2021  December          171.60"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4f4888ae-eb03-4327-be7e-41e57359cac2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sector</th>\n",
              "      <th>Year</th>\n",
              "      <th>Name</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>257</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2021</td>\n",
              "      <td>October</td>\n",
              "      <td>169.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>258</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2021</td>\n",
              "      <td>November</td>\n",
              "      <td>168.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>259</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2021</td>\n",
              "      <td>November</td>\n",
              "      <td>3.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2021</td>\n",
              "      <td>December</td>\n",
              "      <td>169.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>261</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2021</td>\n",
              "      <td>December</td>\n",
              "      <td>171.60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f4888ae-eb03-4327-be7e-41e57359cac2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4f4888ae-eb03-4327-be7e-41e57359cac2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4f4888ae-eb03-4327-be7e-41e57359cac2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-38d59ddd-c944-4b28-a627-39b3fb3a0ded\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-38d59ddd-c944-4b28-a627-39b3fb3a0ded')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-38d59ddd-c944-4b28-a627-39b3fb3a0ded button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data_ap\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2021,\n        \"max\": 2021,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"October\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 74.30551473477591,\n        \"min\": 3.64,\n        \"max\": 171.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          168.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Averaging the extreme value\n"
      ],
      "metadata": {
        "id": "j53MFWbxZDHe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.loc[259,'Andhra Pradesh'] =(data_ap.loc[257,'Andhra Pradesh'] + data_ap.loc[261,'Andhra Pradesh'])/2"
      ],
      "metadata": {
        "id": "-YKpnTdC2fBc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.loc[257:261]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WZTWVydG2hft",
        "outputId": "8c9ab778-3957-42dc-9409-3f94ac86acd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Sector  Year      Name  Andhra Pradesh\n",
              "257  Urban  2021   October           169.4\n",
              "258  Rural  2021  November           168.9\n",
              "259  Urban  2021  November           170.5\n",
              "260  Rural  2021  December           169.2\n",
              "261  Urban  2021  December           171.6"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1680ecd5-b9f9-4dcd-8561-6be38ef6aab6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sector</th>\n",
              "      <th>Year</th>\n",
              "      <th>Name</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>257</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2021</td>\n",
              "      <td>October</td>\n",
              "      <td>169.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>258</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2021</td>\n",
              "      <td>November</td>\n",
              "      <td>168.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>259</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2021</td>\n",
              "      <td>November</td>\n",
              "      <td>170.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>260</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2021</td>\n",
              "      <td>December</td>\n",
              "      <td>169.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>261</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2021</td>\n",
              "      <td>December</td>\n",
              "      <td>171.6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1680ecd5-b9f9-4dcd-8561-6be38ef6aab6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1680ecd5-b9f9-4dcd-8561-6be38ef6aab6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1680ecd5-b9f9-4dcd-8561-6be38ef6aab6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a590de7e-9621-4102-809e-4d2ab68d7189\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a590de7e-9621-4102-809e-4d2ab68d7189')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a590de7e-9621-4102-809e-4d2ab68d7189 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data_ap\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Rural\",\n          \"Urban\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2021,\n        \"max\": 2021,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2021\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"October\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.116691542011488,\n        \"min\": 168.9,\n        \"max\": 171.6,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          168.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i56EmfkO2jmm",
        "outputId": "a67c2650-2d53-423f-d267-266a8a45617a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 268 entries, 0 to 267\n",
            "Data columns (total 4 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   Sector          268 non-null    object \n",
            " 1   Year            268 non-null    int64  \n",
            " 2   Name            268 non-null    object \n",
            " 3   Andhra Pradesh  262 non-null    float64\n",
            "dtypes: float64(1), int64(1), object(2)\n",
            "memory usage: 8.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap['Andhra Pradesh'].fillna(np.nanmedian(data_ap['Andhra Pradesh']),inplace = True)"
      ],
      "metadata": {
        "id": "q2nzi6qK2m2-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.nanmedian(data_ap['Andhra Pradesh'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q3QWc1mM35Xm",
        "outputId": "c253043a-ba4f-4180-f3bd-72efccf863e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(136.7)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Concatenating Month and Year into Date column to date time format**"
      ],
      "metadata": {
        "id": "Sygid_SUZMJE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Month_map = {\n",
        "    'January': 1,\n",
        "    'February': 2,\n",
        "    'March': 3,\n",
        "    'April': 4,\n",
        "    'May': 5,\n",
        "    'June': 6,\n",
        "    'July': 7,\n",
        "    'August': 8,\n",
        "    'September': 9,\n",
        "    'October': 10,\n",
        "    'November': 11,\n",
        "    'December': 12\n",
        "}\n",
        "\n",
        "data_ap['Month'] = data_ap['Name'].map(Month_map)"
      ],
      "metadata": {
        "id": "GWeALKTI5CXW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "WgQhnh4S5fsy",
        "outputId": "aa34e63d-f7ad-4257-ef96-9b8264ad4d23"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Sector  Year      Name  Andhra Pradesh  Month\n",
              "0    Rural  2011   January           104.0    1.0\n",
              "1    Urban  2011   January           103.0    1.0\n",
              "2    Rural  2011  February           107.0    2.0\n",
              "3    Urban  2011  February           106.0    2.0\n",
              "4    Rural  2011     March           103.1    3.0\n",
              "..     ...   ...       ...             ...    ...\n",
              "263  Urban  2022   January           170.3    1.0\n",
              "264  Rural  2022  February           167.2    2.0\n",
              "265  Urban  2022  February           170.9    2.0\n",
              "266  Rural  2022     March           169.6    3.0\n",
              "267  Urban  2022     March           173.1    3.0\n",
              "\n",
              "[268 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c22122af-741d-424a-8474-08de240b7cdd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sector</th>\n",
              "      <th>Year</th>\n",
              "      <th>Name</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "      <th>Month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>January</td>\n",
              "      <td>104.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2011</td>\n",
              "      <td>January</td>\n",
              "      <td>103.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>February</td>\n",
              "      <td>107.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2011</td>\n",
              "      <td>February</td>\n",
              "      <td>106.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>March</td>\n",
              "      <td>103.1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>263</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2022</td>\n",
              "      <td>January</td>\n",
              "      <td>170.3</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>264</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2022</td>\n",
              "      <td>February</td>\n",
              "      <td>167.2</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>265</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2022</td>\n",
              "      <td>February</td>\n",
              "      <td>170.9</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2022</td>\n",
              "      <td>March</td>\n",
              "      <td>169.6</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>267</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2022</td>\n",
              "      <td>March</td>\n",
              "      <td>173.1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>268 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c22122af-741d-424a-8474-08de240b7cdd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c22122af-741d-424a-8474-08de240b7cdd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c22122af-741d-424a-8474-08de240b7cdd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6a42176d-1847-4101-bf20-41cc2a7d9b47\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a42176d-1847-4101-bf20-41cc2a7d9b47')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6a42176d-1847-4101-bf20-41cc2a7d9b47 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_fa52c5f6-2c1d-44fc-914a-db60ed04a912\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data_ap')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fa52c5f6-2c1d-44fc-914a-db60ed04a912 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data_ap');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data_ap",
              "summary": "{\n  \"name\": \"data_ap\",\n  \"rows\": 268,\n  \"fields\": [\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Urban\",\n          \"Rural\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2011,\n        \"max\": 2022,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2021,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"December\",\n          \"October\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.529561713170992,\n        \"min\": 103.0,\n        \"max\": 173.1,\n        \"num_unique_values\": 203,\n        \"samples\": [\n          110.9,\n          105.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.498657100054164,\n        \"min\": 1.0,\n        \"max\": 12.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11.0,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime"
      ],
      "metadata": {
        "id": "M4EtZMKG7t_I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.dropna(subset=['Month'], inplace=True) # Drop rows with NaN in 'Month'\n",
        "data_ap['Date'] = data_ap.apply(\n",
        "    lambda row: datetime.strptime(\n",
        "        f\"{int(row.Year)}/{int(row.Month)}/{1}\", \"%Y/%m/%d\"\n",
        "    ), axis=1)"
      ],
      "metadata": {
        "id": "S-u4jYMK5eEp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_ap.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "_ra2yLsv7ZUJ",
        "outputId": "c92114b0-b4a5-458e-8aeb-58ffa05189bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Sector  Year      Name  Andhra Pradesh  Month       Date\n",
              "0  Rural  2011   January           104.0      1 2011-01-01\n",
              "1  Urban  2011   January           103.0      1 2011-01-01\n",
              "2  Rural  2011  February           107.0      2 2011-02-01\n",
              "3  Urban  2011  February           106.0      2 2011-02-01\n",
              "4  Rural  2011     March           103.1      3 2011-03-01"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-410e7aa9-ec75-4ded-a9fe-a64c8d775cfa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sector</th>\n",
              "      <th>Year</th>\n",
              "      <th>Name</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "      <th>Month</th>\n",
              "      <th>Date</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>January</td>\n",
              "      <td>104.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2011</td>\n",
              "      <td>January</td>\n",
              "      <td>103.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>February</td>\n",
              "      <td>107.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-02-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Urban</td>\n",
              "      <td>2011</td>\n",
              "      <td>February</td>\n",
              "      <td>106.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2011-02-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Rural</td>\n",
              "      <td>2011</td>\n",
              "      <td>March</td>\n",
              "      <td>103.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2011-03-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-410e7aa9-ec75-4ded-a9fe-a64c8d775cfa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-410e7aa9-ec75-4ded-a9fe-a64c8d775cfa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-410e7aa9-ec75-4ded-a9fe-a64c8d775cfa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6e332cb2-9ef6-4213-8e9c-2d99aa7718aa\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e332cb2-9ef6-4213-8e9c-2d99aa7718aa')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6e332cb2-9ef6-4213-8e9c-2d99aa7718aa button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data_ap",
              "summary": "{\n  \"name\": \"data_ap\",\n  \"rows\": 268,\n  \"fields\": [\n    {\n      \"column\": \"Sector\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Urban\",\n          \"Rural\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2011,\n        \"max\": 2022,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2021,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"December\",\n          \"October\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.529561713170992,\n        \"min\": 103.0,\n        \"max\": 173.1,\n        \"num_unique_values\": 203,\n        \"samples\": [\n          110.9,\n          105.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2022-03-01 00:00:00\",\n        \"num_unique_values\": 133,\n        \"samples\": [\n          \"2015-05-01 00:00:00\",\n          \"2016-11-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Group the data by Dtae to aggregate rural and urban**"
      ],
      "metadata": {
        "id": "o8HTXvCRZbn2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data1= data_ap.groupby(['Date'])['Andhra Pradesh'].median().reset_index()"
      ],
      "metadata": {
        "id": "QkLYtmdm79x1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "AAvmmQ1k8XWa",
        "outputId": "120f8c8a-0b48-464f-8030-3cfd4ee48db6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Date  Andhra Pradesh\n",
              "0 2011-01-01          103.50\n",
              "1 2011-02-01          106.50\n",
              "2 2011-03-01          103.35\n",
              "3 2011-04-01          104.95\n",
              "4 2011-05-01          105.99"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38b7df88-edf7-4a16-bc94-c19d7624d06c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>103.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-02-01</td>\n",
              "      <td>106.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-03-01</td>\n",
              "      <td>103.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-04-01</td>\n",
              "      <td>104.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-05-01</td>\n",
              "      <td>105.99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38b7df88-edf7-4a16-bc94-c19d7624d06c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-38b7df88-edf7-4a16-bc94-c19d7624d06c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-38b7df88-edf7-4a16-bc94-c19d7624d06c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-88f57862-a36a-4f9c-9fb6-442cbd97101a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88f57862-a36a-4f9c-9fb6-442cbd97101a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-88f57862-a36a-4f9c-9fb6-442cbd97101a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data1",
              "summary": "{\n  \"name\": \"data1\",\n  \"rows\": 133,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2022-03-01 00:00:00\",\n        \"num_unique_values\": 133,\n        \"samples\": [\n          \"2015-05-01 00:00:00\",\n          \"2016-11-01 00:00:00\",\n          \"2013-08-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.519883631881413,\n        \"min\": 103.35,\n        \"max\": 171.35,\n        \"num_unique_values\": 128,\n        \"samples\": [\n          134.95,\n          130.45,\n          120.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Time Series Decomposition**"
      ],
      "metadata": {
        "id": "ixWpaeiJZqs0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data1= pd.DataFrame(data1)"
      ],
      "metadata": {
        "id": "bQee86vl8hgE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1= data1.set_index([\"Date\"])"
      ],
      "metadata": {
        "id": "S7apUYGr8os6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "ixpAobf18tCR",
        "outputId": "e605b75e-cef0-447f-c32b-33bd16e027eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Andhra Pradesh\n",
              "Date                      \n",
              "2011-01-01          103.50\n",
              "2011-02-01          106.50\n",
              "2011-03-01          103.35\n",
              "2011-04-01          104.95\n",
              "2011-05-01          105.99"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8dc4fd05-396f-4372-872e-b457dabe071e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>103.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>106.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>103.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>104.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>105.99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8dc4fd05-396f-4372-872e-b457dabe071e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8dc4fd05-396f-4372-872e-b457dabe071e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8dc4fd05-396f-4372-872e-b457dabe071e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3b8904c2-248a-441d-84c4-965b70044140\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b8904c2-248a-441d-84c4-965b70044140')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3b8904c2-248a-441d-84c4-965b70044140 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data1",
              "summary": "{\n  \"name\": \"data1\",\n  \"rows\": 133,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2022-03-01 00:00:00\",\n        \"num_unique_values\": 133,\n        \"samples\": [\n          \"2015-05-01 00:00:00\",\n          \"2016-11-01 00:00:00\",\n          \"2013-08-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.519883631881413,\n        \"min\": 103.35,\n        \"max\": 171.35,\n        \"num_unique_values\": 128,\n        \"samples\": [\n          134.95,\n          130.45,\n          120.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data1.index.dtype"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DY-h4vIk8u4Z",
        "outputId": "b7c7435e-c114-45a2-9f48-2a1c5afa1a19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('<M8[ns]')"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(18, 4))\n",
        "plt.plot(data1, label='Index')\n",
        "plt.legend(loc='best')\n",
        "plt.title(\n",
        "    'Consumer Price Index\\n',\n",
        "    fontdict={'fontsize': 16, 'fontweight': 'bold', 'color': 'orange'}\n",
        ")\n",
        "plt.xticks(rotation=90, fontweight=\"bold\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "zjRKTLgO8y9L",
        "outputId": "e84322a4-7666-4335-819e-79ec27e223d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x400 with 1 Axes>"
            ],
            "image/png": "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AXHuUdQJJ0LapXvuO/Ntd2mA7S9D5XJ3eGw43fvFTIIBl0Lq+Z6to2wNg+mvu0faVq1wB3ltVe6a2n7hEDYY+s2BoTdAUL+u+w672V0feMtT7lGmJj/3qNuMm921rbc+7bl29lTkKDh1nXvSyML33GUZWqsAlzuwDRsMMVPdExvuXjLiSJV0BpyxBba/4B51XLcR7HXu+s5B/SB2mvt+7Opwvo+j74WosZD1BNSsdi+LGAVDroOBP4ftL+5//9QLIG4mZP8bShdCfRa01blD+cAEdy3ruBmQfI77PsGedaqTz4HBv9r5OuVcGPxryP6X+3X5YndJkrG7vBEkIiIicgQxGYbhxc9cioiIiIiIiIiIiIioDIiIiIiIiIiIiIiI+ACF1SIiIiIiIiIiIiLidQqrRURERERERERERMTrFFaLiIiIiIiIiIiIiNcprBYRERERERERERERr1NYLSIiIiIiIiIiIiJep7BaRERERERERERERLxOYbWIiIiIiIiIiIiIeJ3CahERERERERERERHxOoXVIiIiIiIiIiIiIuJ1CqtFRERERERERERExOsUVouIiIiIiIiIiIiI1ymsFhERERERERERERGvU1gtIiIiIiIiIiIiIl6nsFpEREREREREREREvE5htYiIiIiIiIiIiIh4ncJqEREREREREREREfE6hdUiIiIiIiIiIiIi4nUKq0VERERERERERETE6xRWi4iIiIiIiIiIiIjXKawWEREREREREREREa9TWC0iIiIiIiIiIiIiXqewWkRERERERERERES8TmG1iIiIiIiIiIiIiHidwmoRERERERERERER8TqF1SIiIiIiIiIiIiLidQqrRURERERERERERMTrFFaLiIiIiIiIiIiIiNcprBYRERERERERERERr1NYLSIiIiIiIiIiIiJep7BaRERERERERERERLzO6u0GHIqqqgYMw9utEOk5kwliYsL0DIv4APVHEd+gvijiG9QXRXyD+qKIb1Bf9IyO+9gdh3VYbRjoQZHDmp5hEd+h/ijiG9QXRXyD+qKIb1BfFPEN6ot9R2VARERERERERERERMTrFFaLiIiIiIiIiIiIiNcprBYRERERERERERERrzusa1YfiMvlwul0eLsZRxSr1Q+TyeTtZoiIiIiIiIiIiMgR5ogMqw3DoL6+mpaWRm835YhjMpmJiemH1ern7aaIiIiIiIiIiIjIEeSIDKs7gurQ0Cj8/QM0EthDDMNFbW0VdXXVREfH676KiIiIiIiIiIiIxxxxYbXL5ewMqkNDw73dnCNOWFgkdXWVuFxOLJYj7vERERERERERERERLzniJlh0Op0A+PsHeLklR6aOgNrlcnm5JSIiIiIiIiIiInIkOeLC6g4qUdE7dF9FRERERERERESkNxyxYbWIiIiIiIiIiIiIHD4UVh9hZsyYxJIl33q7GSIiIiIiIiIiIgK0Olz8e9kOfsyr8XZTfJ5myPMhDz/8AI2NDTz66JPeboqIiIiIiIiIiIgcIofL4J5Psvg2u4oJyRFMSYvydpN8mkZWi4iIiIiIiIiIiHiYYRg89uU2vs2uwt9i4prpA7zdJJ/X47B6xYoVXHvttcyYMYOMjAy++uqrLuszMjL2+vX88893blNbW8utt97KhAkTmDRpEnfddRdNTU2HfjVHkBtuuIannvozf//7/3HqqSdy1lkn88IL/+qyTUFBPtdf/ytOPHE6l19+AStWLN/jOGVlpdx7752ccsrxnHrqidx55y2UlBQDsGNHHieddCwLF37euf3XX3/JiSceS27u9t69QBERERERERERkSPY35bm8UFmKWYTPHz6cCamRHq7ST6vx2VAmpubycjIYN68edxwww17rP/uu++6vF6yZAl33303J598cuey2267jYqKCl566SXsdjt33XUX9913H08+2XvlLwzDwOZw9drx9ybQasZkMh30/p999jEXXXQZzz33MpmZ63nkkQcZM2YskydPxeVycffdtxMVFcO//vUyTU2NPP101/vncDi49dbfMnLkaJ599nksFgv/+c8L3Hrrb/nPf95gwIA0rr/+Zv7yl8cYM2YcZrOJJ554lOuu+y3p6QMP9fJFRERERERERER8Sm2zne9yq1hZUMfQuBAuHJ+E1Xzw+d2+vLqigFdWFABw95yhHD8k1uPnOBL1OKyeNWsWs2bN2uf6uLi4Lq+//vprpkyZQkpKCgA5OTksXbqUBQsWMHr0aADuuecerrnmGu644w4SEhJ62qQDMgyDq99Yx/rieo8fe3/GJobz74vHHnRgPWjQEH75y2sASElJ5d1332LlyhVMnjyVlSt/YseOPP7yl78RG+u+59dccz233XZj5/5ff70Ql8vFnXfe29mGu+66n1NO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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Additive Seasonal Decomposition**"
      ],
      "metadata": {
        "id": "4SRxXSCIZ3FI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pylab import rcParams\n",
        "from scipy.fftpack import fftfreq   # Fast Fourier Transform\n",
        "import statsmodels.api as sm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "rcParams['figure.figsize'] = 12, 8\n",
        "\n",
        "# Seasonal Decomposition\n",
        "decomposition = sm.tsa.seasonal_decompose(\n",
        "    data1['Andhra Pradesh'],\n",
        "    model='additive',\n",
        "    period=12\n",
        ")\n",
        "\n",
        "fig = decomposition.plot()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "dAJ949aK899R",
        "outputId": "88b2ee05-2cf4-4674-824d-ea6c7f98c5a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####**The data contains Trend and level but not seasonality**"
      ],
      "metadata": {
        "id": "Y7tG0t_-aGUI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Split the data into train and test split**"
      ],
      "metadata": {
        "id": "Pv19c7UqaR4T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_len =122\n",
        "train = data1[0 : train_len]\n",
        "test= data1[train_len :]"
      ],
      "metadata": {
        "id": "R6PPa5ja9NaH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "-FMTqWKO9gW0",
        "outputId": "08a7812f-0220-40d4-90a9-437f853c85fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Andhra Pradesh\n",
              "Date                      \n",
              "2011-01-01          103.50\n",
              "2011-02-01          106.50\n",
              "2011-03-01          103.35\n",
              "2011-04-01          104.95\n",
              "2011-05-01          105.99"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70836d3e-73f2-4aee-a31e-8be13343029e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2011-01-01</th>\n",
              "      <td>103.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-02-01</th>\n",
              "      <td>106.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-03-01</th>\n",
              "      <td>103.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-04-01</th>\n",
              "      <td>104.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011-05-01</th>\n",
              "      <td>105.99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70836d3e-73f2-4aee-a31e-8be13343029e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70836d3e-73f2-4aee-a31e-8be13343029e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70836d3e-73f2-4aee-a31e-8be13343029e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a3b7c2c1-e0c6-44ab-913f-103e0d8ca558\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3b7c2c1-e0c6-44ab-913f-103e0d8ca558')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a3b7c2c1-e0c6-44ab-913f-103e0d8ca558 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train",
              "summary": "{\n  \"name\": \"train\",\n  \"rows\": 122,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2021-04-01 00:00:00\",\n        \"num_unique_values\": 122,\n        \"samples\": [\n          \"2012-07-01 00:00:00\",\n          \"2014-11-01 00:00:00\",\n          \"2015-01-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.121327659223846,\n        \"min\": 103.35,\n        \"max\": 164.45,\n        \"num_unique_values\": 118,\n        \"samples\": [\n          135.64999999999998,\n          141.60000000000002,\n          105.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "OLTS1Ahj9iv8",
        "outputId": "ab91ae85-bb96-4652-a5c1-33a83c8c094d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Andhra Pradesh\n",
              "Date                      \n",
              "2021-05-01          136.70\n",
              "2021-06-01          164.65\n",
              "2021-07-01          165.45\n",
              "2021-08-01          166.30\n",
              "2021-09-01          166.45\n",
              "2021-10-01          168.10\n",
              "2021-11-01          169.70\n",
              "2021-12-01          170.40\n",
              "2022-01-01          168.80\n",
              "2022-02-01          169.05\n",
              "2022-03-01          171.35"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-790903bd-7019-4aee-8507-63d6dc42a56a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Andhra Pradesh</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2021-05-01</th>\n",
              "      <td>136.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-06-01</th>\n",
              "      <td>164.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-07-01</th>\n",
              "      <td>165.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-08-01</th>\n",
              "      <td>166.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-09-01</th>\n",
              "      <td>166.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-10-01</th>\n",
              "      <td>168.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-11-01</th>\n",
              "      <td>169.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-12-01</th>\n",
              "      <td>170.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-01</th>\n",
              "      <td>168.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-01</th>\n",
              "      <td>169.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-01</th>\n",
              "      <td>171.35</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-790903bd-7019-4aee-8507-63d6dc42a56a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-790903bd-7019-4aee-8507-63d6dc42a56a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-790903bd-7019-4aee-8507-63d6dc42a56a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5f80af7f-9b5e-4bbc-91f4-bfe2bc52fbf2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f80af7f-9b5e-4bbc-91f4-bfe2bc52fbf2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5f80af7f-9b5e-4bbc-91f4-bfe2bc52fbf2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_7dc724d7-d2c8-4123-9ed5-f653548c85b8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7dc724d7-d2c8-4123-9ed5-f653548c85b8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test",
              "summary": "{\n  \"name\": \"test\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-05-01 00:00:00\",\n        \"max\": \"2022-03-01 00:00:00\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"2021-10-01 00:00:00\",\n          \"2021-05-01 00:00:00\",\n          \"2022-02-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Andhra Pradesh\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.678258201669445,\n        \"min\": 136.7,\n        \"max\": 171.35,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          168.10000000000002,\n          136.7,\n          169.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZnPgK6CU9nRr",
        "outputId": "b75dff7b-089e-4967-989f-4327590f2c4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(122, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQo5i2ZD9ksc",
        "outputId": "285e1f59-afe8-45ba-b24c-11aff95ca370"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(11, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,4))\n",
        "\n",
        "# Replace 'Month' with 'Name' wherever applicable\n",
        "plt.plot(data1['Andhra Pradesh'], label='Andhra Pradesh')\n",
        "\n",
        "plt.legend(loc='best')\n",
        "plt.title('distribution of CPI')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "k4KcJ0-b9seu",
        "outputId": "4b375b02-f390-4416-b523-b93cb78b7540"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Checking the stationarity of the data**"
      ],
      "metadata": {
        "id": "41PXl321aeLb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.stattools import adfuller\n",
        "adf_test = adfuller(data1['Andhra Pradesh'])\n",
        "print(adf_test)\n",
        "print('ADF Statistic: %f' % adf_test[0])\n",
        "print('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\n",
        "print('p-value: %f' % adf_test[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UAIBLQCP91jB",
        "outputId": "1f6fd997-2c9c-4f59-8dd2-27f8b2fef921"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(np.float64(0.2736964227492423), np.float64(0.9761049824113293), 9, 123, {'1%': np.float64(-3.4846672514209773), '5%': np.float64(-2.8853397507076006), '10%': np.float64(-2.5794629869786503)}, np.float64(655.2231216914082))\n",
            "ADF Statistic: 0.273696\n",
            "Critical Values @ 0.05: -2.89\n",
            "p-value: 0.976105\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###**Since p-value > 0.05, Our data is NOT STATIONARY**"
      ],
      "metadata": {
        "id": "Zw-kPw6db2vl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.stattools import kpss\n",
        "kpss_test = kpss(data1['Andhra Pradesh'])\n",
        "\n",
        "print('KPSS Statistic: %f' % kpss_test[0])\n",
        "print('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\n",
        "print('p-value: %f' % kpss_test[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GvOQiDa_-IBu",
        "outputId": "ee8d24e4-c2e2-4169-84b9-03e4a091f94c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "KPSS Statistic: 1.856375\n",
            "Critical Values @ 0.05: 0.46\n",
            "p-value: 0.010000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2302474787.py:2: InterpolationWarning: The test statistic is outside of the range of p-values available in the\n",
            "look-up table. The actual p-value is smaller than the p-value returned.\n",
            "\n",
            "  kpss_test = kpss(data1['Andhra Pradesh'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import boxcox\n",
        "\n",
        "# Apply Box-Cox transformation\n",
        "\n",
        "data_boxcox = pd.Series(boxcox(data1['Andhra Pradesh'], lmbda=0),index = data1.index)\n",
        "\n",
        "plt.figure(figsize=(12,4))\n",
        "plt.plot(data_boxcox, label='After Box Cox tranformation')\n",
        "plt.legend(loc='best')\n",
        "plt.title('After Box Cox transform\\n', fontdict={'fontsize': 16, 'fontweight': 5, 'color': 'Orange'})\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 416
        },
        "id": "n4wsIrwZ_DAg",
        "outputId": "2479fea4-035a-4647-889a-468489a62068"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA9UAAAGPCAYAAABSwPOnAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAid9JREFUeJzs3Xd4VNXWx/HvzKT3nkBCSGihhqoUQQRFQFHsvV57vVds13JtV/S1Yy9XsSN2aWJBsWJBSugd0nvvyZT3j5NCTAJJyJDC7/M8eZLMnLLPnI1mnbX32iaHw+FARERERERERFrN3NENEBEREREREemqFFSLiIiIiIiItJGCahEREREREZE2UlAtIiIiIiIi0kYKqkVERERERETaSEG1iIiIiIiISBspqBYRERERERFpIwXVIiIiIiIiIm2koFpERERERESkjVw6ugEiInIYfDkcCjaA2Q1OTwP34Oa3rSqAhHsgdSlUpIO9GsImwwk/HK7Wtl7JPlgc28QbJnALAP/B0Pt86HcNmLvA//oKt8Ku/0HWSihNguoicPUD3wEQfhzEXgL+gzq6lUeuslRY/2/I/A4qssBhg9hLYfxbHd0yERHpAF3gLwsRETkkuauNgBrAXgV734OB/2x++z+vhqSPwTsGos4Aiwf4DTTeWxQDpYlw6l7wiXFyw9uo15ng4mP8bK+Ckr2QvQqyf4Wkj2DKt2Bx69g2NsduhXW3w47nwGEHtyAIPgrcgqG6APLWwJbfYevjMOpZiLuxo1vcUFfoH4fK4YCfz4DcP42HNWFTwOwKoRM7umUiItJBFFSLiHR3u98wvntGQnkq7Hmj+aDaXg3JnxuB9EkJRna0qxn5ZOOALnsVfDcVsn6CXa91vmC01qqLIOlD43Mf/SzEXAxmS/37DgdkfAvr74KSXR3XziNZaaIRUHtFw8yErjHyQUREnEpzqkVEujNrGSR+YPw84V0jg1uw0cheN6U8HRxW8AjvmgF1c0InQPRZxs+Z33VsW5qze74RUJtdYco30OeyhgE1gMkEPU6E6b9D9Lkd0swjXlmS8d0nVgG1iIgAylSLiHRvSR8b83H9h0L4FOh9rpG53v2GMax4fwtM9T+XJjb8fdyb8Pvl9b//ff7y8SuNub61ytJg65OQvtw4lsliDCGPvRT6X9s4GPntMtj7tnGeoDGw6b9GVrkyC4b8B+IfOIQPoYZHhPHdbm36/bIU2PIYpH0FZclgcTc+t9hLoO+VDQPcv26CHS8YQ36PX9n4ehLugc2PQOBIOHGVkfk/EIcDNs81fu53HYSMPfD2ZlcIHd/49Zw/YduTkP0LVOaAawAEj4W4m6HHtPrtbJXw7THGcPLBd8KI/2t4HLsNvq/J7Pe7Fo5++cDt2fNWy/pH5g/w3RRjjv5xX8KW/zP6aGkieITB7H3115H8ibF9WRJU5YFbIAQdbYyyiDih+TbEXgpHvQibHjaOXZZs7NtjOgx/BLwiG++bsQK2PQt5f0JlnvHwyT3EuA/9roawYxvP28/6seG/kf2HvFvLYPtzxnSD4p3GnGufWIg6HQbdarRnf7XH9u4Np+yG7c/CvneNfa2lcIGj4Wc35Wvjs9v3vjHn3iPMqBkQ/6DR16oKjX9DyZ9BeRp4RkDsZTD0Xj0IEBFxAv2XVUSkO6sd+t33H8b3Pv8wXktcCKOeARfP+m1jLwVrCSR/Ci7e0Ous+vd8+hnvJ39i/JG//7xlqA9YwQjEfjoNqvKNedkR08BeaQyZXXMTpC6B45YageHfZa+CP68Fzx5GIGMrB1ff9vkscv80vgcMaeK91bByhhG8eUVD1GlQXQhZP0DOKkj5HI5dXD8Xe+RTkPO7EbxuuLdhUJr2FWx+1Mj0T/zo4AE1GKMHSvYYP/e5tG3Xt+t/sPpaYy524EgIO84IVtOWGl/DHoBh9xvbWtyNti0fDVseNwK1njPrj7XhP8Z9DBwJo+cd/Nyt6R8AtgpYcRwUbYHQYyFgOFTl1r+fcLdRpM1/CASNNvpj8e76axk1r/kpDNWF8M0EI9gMmwQBQyHnN9j7jhEIz0wAN//67fe8Xf9AIPhoY460rdx4yJK40Aiuw441rif2UqjIgPSvjdEcPWbUH6f2eivz4PvjIX+90QfCpxp9PetH48HJvgVw/PdNzzmvna+d/hWEToLIQVC4ueE29ipYOR3y1xn32DcOsn825tkXboHxb8O3E4x2hB0L1f0h+yfY9CBUZB78AYmIiLSayeFwODq6ESIi4gRFO2BpnPEH/Wmp4BFqvL50EBRtg/HvQOzFDffZP2NWmzXc38EKUZVnwJdDjT/oj3rRqLZtqplpVJkLv5wDmd/DsAdh2H31+9VmqgEG/xuGz63fryX2zyLu3zZbFZTuMzJ/O18yAqQZa8G7V/2+tkrjcypNNLKyY56rD/hL9sB3xxvHGHK30a66c+6F5aOMIO64ZUZQWpYCy0caWeKJH0H02S1r/+758McVRnX2c0pbn00s2Gi0xWEzgqr972vacuMhh73KGFa+f8Y6+Qv4+XTjc5m5DryijO1/ONl4mDFjLfj2bXk7DtY/arOtAAHxRsbVM6LxdmnLIXCE8XBlf9m/wQ8zjKD31L0Ns877Z8t7TDc+/9opDFX5xpz6/PVGtnrIXfu1uQ+U7oUTfoawvxUbq8gyKn0HjWx8Dc1VxP/lPGMYf/BYo1/UVtqvLjH6f/pyCJkAJ/5av8/+/dcrCqZ+B34Dmv/sgo82Mv21xy5NNPpdVT4EDDMeZh2zEFy8jPdz/4JvxgN243Pzjm7cbhERaTPNqRYR6a72zDe+R55aH1CDka2G+ix2e9o+zwieB9wA/a9rGBi7BxuBvNnVGDrd1DNd3wEQ/3DrAuq/WxxrDMtdYIIP3Y2AeedLxvDY6asbBtRQP/zYs6eRld0/g+7Txyh8BrD9eSPDWvdebM0SSg747WIjyP71PCOgHnBjywNqgMps47tbUNuG525/1pgL3+v0xg9Kes40hjADbH2i4Xu9ToO4W4w2/3qecQ2/XWxc09g3WhdQt9aYF5oOqGvb/PeAGowh7/1vMArqpSxqel8Xb2Mawf41AdwCjYc1YAz13l9FJrj6Nw6owRhWvX9AfTClSZD8MWCCo19ruHSdqw+M/Z8xciFnlTEqoynDH2kcUDdgMu7N/sf27m0UtQPjHo59vT6gBggeY3ymDrsRnIuISLtSUC0i0h3ZrcawVqgPomvFXgImF2N4b/Hu9j1v6jLje3NFtLwiwbe/EUQW72z8ftRpjYtztVavM41hurGXGoFG+PFG0JT0kTGsuLqk4fZZPxjfe59nDItudLwzjKDMWmzMQW7Q3tkwcI7xIGH5SGPZrqAxxvDww6k2UIq9rOn3+15hfM/+2Zgvvb+Rj0HwOKPty0fWPBS5qb6wmzN4hBlDsw+kMhf2vAPr7oA/rjJGM/x2mTGMGqBoe9P7BY1pOiD3q1nXuzy14evBRxujDVZdYtxfh701V9JQ1k/1w+8D4xu/7xVpZNEBMlc2fYxeZx74HN7RxpD2v/Ptb3wPGm18vs29X5524OOLiEiraU61iEh3lLbMmPvpud8f8bU8w6HnSZC62Mhm7z+k+VDVzgtecZCACWqys3/LyLXH2sZNLalVVWAMvU38AKqL4bgl9e+V1QRZ3n8rrlXLZDLeq8qv33Z/Ix4z5sAWbjGypBM/av062O41Iwmq8oygt7UPFmoDRZ9mrsGnJuNsqzDmLu8fdJldYeJCWNLfCC4Dhtdn553FO+bA7+/6H6y9xZif3RxrUdOvezUztLk2c73/aAOAo16CH2cZhcH2vQsuvkYRv/CpRta/NUOlD3YfoP5e/D24B+O+7J9hbkqz1+dz4PddamoT/P36RUTkkCmoFhHpjmqHdtsr4LvJjd+vDQ73vAXDHjr07HCdmixfr7OMAPNA3IIbv2bxbPxae3ALgFFPwZfxRqGrgs1NFyxri9w/jPnrYASBBRsPHFQ1JWi08d1eBQUJEDSqfdrWUokLjSHVYFTbrkg3hhQ7y4Huc94a+PMao2L8iMcg8hQjsLV4GQ84dr1mvN9cSZjWTh3wHwSztkP6N8Z8/5xVRkY/83vY9JAx1Dr2otYds61a0v8Pdn2HMnVCRETaREG1iEh3U54OaV8aP1fmGsN6m902zciyRp7cPuf26mUM6x58pzGPszPx6VP/c9HW+qC6tthVbZa9KaV7G25bq6JmLrLDCn0urymWdZlR9Ks1QWlAvJENL91rDNtvbVDtGQklu41raGpocO21WTyMedv7y/oFEu41gtaoU40A+5dzYdrPTVdod7akjwGHMQR98B2N329q2sChMrtA5EnGFxjL0G192qiY/ec1xlz1gz0kAuM+wIH7Uu17npHNbyMiIl2KHmeKiHQ3e94yqkAHjzXWt23ua1BNwNKagmXmmmHNjmbWeu5RsyxT0kdtbr7T7D9/fP/lnsKOM74nfdj00Njkz42h3y6+9RllMDKlv11sVPyOvQTGzTfWIK7KN4LS2sxvS5hMRnVxgF0vG+s0H4jdaizpVat2jfA9bzW9/e6aonWhkxoWQtv/ocCYF2D8uxAy3si+r7uz5e2vdbD+0RKVecb3ph5K2Cog6dO2H7ulXP2MtdFdA8BWVj8S4WDCjjUyxfnrIT+h8fvl6cZDLDDWjRcRkW5BQbWISHdTG0AdbL3j2EuM72lLoSK7Zcf2ijK+/33t3FqDbzcCkW1Pw9anjCWt/q5kL+x9r2Xnay9VBbDuNuNnt6CGRbKizzbmoZanwdo5RsBaq2QvrL3V+DnupoZrTm951AiQ/Acb83IBhj+6X1DaRJb1QPpdaQybt1fDymlGxvrvRcUcDsj43liHOXFh/etx/zSKz6V80fizTf8Gdr1q/DzotobH+u0iY25v7KXQ93Ij4D5mofEZbX+m+QrbzTlY/2gJ/5qCYnvfNua/17JVwOrr60cNtAdrmZGRbqr/Z/0M1QXGMPTa6zoY72jodTbgMDLclfutvW0thT+uNq4jZAKETmiPKxARkU5Aw79FRLqTzB+hZBeY3Y1q1gcSMAQCR0H+Wtj7jpFlPZheZxpVi1ddBD1ONKpiAwy6HfzijOBj8iL4+UwjiN36OPgPNaoxVxUaw65LdhtZdGfNU113W30m2mE35gfnrjaKcFk8jHWc9x/Ka3GHSZ/Ayhmw82Vj6HzwOKPad+b3RhDUYzoMvb9+n6yfYMN9xpDpiR/XH682KF0+0lheLPw4o0J4Sx2zANZGwI4XjWHk626FoKOMILe60LhX5elGoNfnsvr9AoYZ64Kvvs7Inm97BvwGQllizdJNDhj2gHHPam1+BNK/bvhQAIzAcNxb8NNsY93nGWtbXkDuYP2jJfpcbiwRlr/OWB4tdJJxvdk/g7XceICw/dmWHetg7FXGZ7z+dvAfZlTINrsa65LXjgQYck/DJekO5qgXjXXgc/+AxX2NjLTJxahaXpltDPOf8H77tF9ERDoFBdUiIt1J7VDuyFPqA5oDib3ECNR2v9GyoLr/dUb2cN97RvBZO1w65qL6oCnsWDh5s7EWdeoyI6C1VxqVjb2ijW2jD7Js0KFI/tvwYBdv47yxFxsBmW+/xvsEHwUz18OWxyB9OaR8bjyYCBxpfEZ9r6wfNl2RDb+ebwyxP+pFIyjd36EEpWZXGPO88Tnves1YKivnd7CWgKuvsY53n8uNpbP8+jfct9/VRuXurU9C9i9QsAHc/I1K73H/hB7T6rfN/BE23r/fQ4G/VZyOOsVYKmzbU/DruTDtl5bNr25J/zgYtwCY/pfRvvSvIW25sSZzxIkw7H7j2tqLiw8c9YoR8Oavg4xvjUDbs6exlFr/6yFiauuO6R4MJ66C7c8ZUwrSvwHsRjDd7ypjtEBL/m2KiEiXYXI4miufKSIiIiIiIiIHojnVIiIiIiIiIm2koFpERERERESkjRRUi4iIiIiIiLSRgmoRERERERGRNlJQLSIiIiIiItJGCqpFRERERERE2khBtYiIiIiIiEgbKagWERERERERaSMF1SIiIiIiIiJtpKBaREREREREpI0UVIuIiIiIiIi0kYJqERERERERkTZSUC0iIiIiIiLSRgqqRURERERERNpIQbWIiIiIiIhIGymoFhEREREREWkjBdUiIiIiIiIibaSgWkRERERERKSNFFSLiIiIiIiItJGCahEREREREZE2UlAtIiIiIiIi0kYKqkVERERERETaSEG1iIiIiIiISBspqBYRERERERFpIwXVIiIiIiIiIm2koFpERERERESkjRRUi4iIiIiIiLSRgmoRERERERGRNlJQLSIiIiIiItJGCqpFRERERERE2khBtYiIiIiIiEgbuXR0A1ojN7cYh6OjWyHtxWSC4GBf3Vdpd+pb4kzqX+Is6lviTOpf4izduW/VXtvBdKmg2uGg290o0X0V51HfEmdS/xJnUd8SZ1L/Emc5kvuWhn+LiIiIiIiItJGCahEREREREZE2UlAtIiIiIiIi0kZdak71gTgcDqzW6o5uhrSCyQQVFRVUV1cdsfMvpCGLxQWzWc/6RERERKTr6BZBtdVaTW5uBg6HvaObIq2Ul2fGbtd9k3qenj74+QVhMpk6uikiIiIiIgfV5YNqh8NBYWEeZrMZf/9QTCZluboSi8WEzaY0tRj/lquqKikpyQfA3z+4g1skIiIiInJwXT6ottttVFdX4O8fgpubR0c3R1rJxcWM1apMtRjc3NwBKCnJx9c3UEPBRURERKTT6/J/sdYOHbZYuvzzARGhPrC22awd3BIRERERkYPr8kF1Lc2/FOke9G9ZRERERLqSbhNUi4iIiIiIiBxuCqo7MYfDwWOPzWXmzKlMnDiGnTu3d3STpJ389NMPnHvuaRx77NE8++xTHd2cFrvxxqu7VHtFREREpHNJSC3kriVbSCko7+imtBtNRO5gmzZt4Prrr2Ts2PE88cSzDd77/fdVLF++hOeff5WePSPx9w9g4sQxPPLIkxx77HFOac+NN17N+vVr634PDAxi+PCR3Hjjv4iI6OGUc9aqrq7mo48W8M03X5GSkoSHhwfR0b2ZNes0pk8/CRcX53RXZ3+mTXniiUc46aRTOPvs8/Dy8jps522ptWv/4uabr2X58pX4+vrWvf7II0847T6IiIiISPeWXlTBrV9sprDCyvjYIKICPDu6Se1Cfx13sKVLF3Hm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Z5zMTz/9wNSpJwBGAH/77XfXte+MM87hrbecN5VARERERNqmotrGpwnpLNuSyc7s0rrXAzxdGRXlz8qdOXy2IZ09uaU8dupggrzcDnrM7VklPPbdLgCumtCb8TFBTmt/R+l2QTVAV1jlNilpH1u2bOaRR54EjGzs1KnTWLZsEaNGjWnVsXbv3sHGjQm88878utdsNjtVVZVUVFTUZYcHDhzcouOdeOJMLrnkHwDk5eXy7rtvcsstNzJ//rt4eXmTmLiPoUPjGzxAGDZsOOXlZWRlZREREYGfnx///vd/mDPnRoYNi+eiiy474DkdjoO3KzU1BavVSnx8/RxzFxcXBg0awr59e+teO++8i/j55x/49NOPePLJ5/D3D2jRdf9dRESPBgE1GIHk66+/wpYtmyksLMDhMEZEZGZmNAiq+/btX/dzbeCcn59H794xTZ4rMXEvEydObvDasGHD+eijD7DZbFgsRqa8qQcTHh4edQErQFBQMBERPRsUQAsKCiI/P7/u923btjJ//mvs2rWD4uLiBtcRG9un+Q/lb222WCwNRjH4+wcQHd2bxMT6+/H39gUHh9QNNRcRERGRziGjqILbFm1he1YJAK4WE8f2DeakweFMiAnExWLm1z153LNsK+tTi7jkvXU8OXswgyKaTsAAFFdYuXPxFiqtdo6JDeKKcdGH63IOq24XVJtMJv533vBOP/x76dJF2Gw2TjttZt1rDocDV1dXbrnlTnx8fFp8rLKycq644momT57a6D03t/qnRx4eLauu5+3tQ1RULwCionrx73//h9mzZ/Ddd99yyimntbhd69evxWKxkJOTS0VFOV5e3s1u26tXNElJ+1p87APJz88jOTkJi8VCSkoSMKFNx2nq87rzzluIiOjBnXfeQ0hIKHa7nUsuOZfqamuD7fYvAlfbL+z2Q++Tnp6N29RUwbm/v2YymeoC5/Lycm699UaOPno899//MAEBgWRmZjBnzo1YrdWH3MaWtaUFT1FERERE5LBYl1LInYu3kF9eTaCnK9cc05tpcaH4eTQsintMnyDeunAkt36xmaT8cq5cmMB9MwZw4cSGgXWV1U56UQXzftxDamEFPf3ceXBmHOZWTpftKrpdUA3GH+2erpaDb9hBrFYrX331JTfe+C+OPnpcg/fuuus2Vqz4itNOO6vJfV1cXLDbbQ1ei4uLIykp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v+7JA+D0+IhG74+I9CfMx42SShur9ubVvW53OLj/q21klVQRHejJ3dP6Y1KGWkREREREpFNTUN3OvtiQjgM4KjqA3kFejd43m0ycWFOwbP8q4O/8mcyqvfm4u5h5dNYgfNxdDleTRUREREREpI0UVLcjq83OFxuNAmVn7leg7O+m1wwB/3lPHqVVVtamFNQVJrttSl8GhPk4va0iIiIiIiJy6JQObUc/7s4lr6yaYG83JvcNbna7uDAfogM9Scov54sNGbz3Vwp2B8wcFMbsYY2HjIuIiIiIiEjnpEx1O/o0wShQNntoOC6W5j9ak8nEjJoh4PN+3ENOaRWxQV78+wTNoxYREREREelKFFS3ow1pRVhMcFp880O/a9VWAQfwcDHz6CmD8HKzOLN5IiIiIiIi0s40/LsdPTl7MCZM9PDzOOi2vYO8GN7Tj4S0Iu48oR99Q7wPQwtFRERERESkPSmobkfjYoJatf2Tpw0hs7iSOBUmExERERER6ZIUVHegAE9XAjxdO7oZIiIiIiIi0kaaUy0iIiIiIiLSRgqqRURERERERNpIQbWIiIiIiIhIGymoFhEREREREWkjBdUiIiIiIiIibaSgWkRERERERKSNFFSLiIiIiIiItJGCahEREREREZE2UlAtIiIiIiIi0kYKqkVERERERETayKWjG9AaJlNHt0DaU+391H2V9qa+Jc6k/iXOor4lzqT+Jc7SnftWS6/J5HA4HM5tioiIiIiIiEj3pOHfIiIiIiIiIm2koFpERERERESkjRRUi4iIiIiIiLSRgmoRERERERGRNlJQLSIiIiIiItJGCqpFRERERERE2khBtYiIiIiIiEgbKagWERERERERaSMF1SIiIiIiIiJtpKBaREREREREpI0UVEubvfrqq5x55pmMHDmS8ePHc/3117Nnz54G21RWVvLggw8yduxYRo4cyU033UROTk6DbR5++GHOOOMMhg4dyuzZsxud548//uC6665j4sSJjBgxgtmzZ7N48WKnXpt0vMPVv/aXmJjIyJEjGTNmTLtfj3Qeh7NvORwO3njjDaZPn87QoUOZNGkSL7/8stOuTTre4exfP//8M+eccw4jR45k3Lhx3HTTTaSkpDjt2qRjtUff2rZtG3PmzGHy5MnEx8czc+ZM3n777Ubn+uOPPzj99NMZOnQo06ZN47PPPnP69UnH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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), data1.index)\n",
        "plt.figure(figsize=(15,6))\n",
        "plt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\n",
        "plt.legend(loc='best')\n",
        "plt.title('After Box Cox transform\\n', fontdict={'fontsize': 16, 'fontweight': 5, 'color': 'Orange'})\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 570
        },
        "id": "wd8VqvdM_ECl",
        "outputId": "febf7919-ab08-4391-89f7-88640dfa0d26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###**We can Clearly see that the data is now stationary, performing ADF test, we obtained a p-value of almost 0 and p value from KPSS test was 0.1000. Hence our data is now stationary**"
      ],
      "metadata": {
        "id": "D3R6Wb0ScXTt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data_boxcox = data_boxcox[:train_len]\n",
        "test_data_boxcox = data_boxcox[train_len:]\n",
        "\n",
        "train_data_boxcox_diff = data_boxcox_diff[:train_len-1]\n",
        "test_data_boxcox_diff = data_boxcox_diff[train_len-1:]"
      ],
      "metadata": {
        "id": "zcKJyWnR_mF9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.graphics.tsaplots import plot_acf\n",
        "data_boxcox_diff.dropna(inplace = True)\n",
        "plot_acf(data_boxcox_diff)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "S_7CUUC8_2Vc",
        "outputId": "d10cf69b-8d7b-408f-bdf8-8942109a67ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+oAAAKqCAYAAACtsaQKAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAUylJREFUeJzt3X2cVnWdP/7XNQMDKDc5M6AVaK4mmNyI5pYIWS6aSbWpaTfmfWZlq+7aqr9Sk3SlvNtEzVw117tKN7PVtL6l3aw3WK6rsbputt6TdwOogCADM9fvD5hLhhmGQebmDPN8Ph7AdZ3zOed6n8Pnmrle1/mcc0rlcrkcAAAAoBCqersAAAAA4E2COgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgDQ437/+99n7Nix+f3vf9+l6x07dmwuvvjiLl0nAPQ0QR0ANtINN9yQsWPH5qCDDtqo9fzud78TMjvBfgJgUyeoA8BGuu222/LOd74zc+fOzTPPPPOW1/O73/0ul1xySRdWtmnqaD/NnTs3X/rSl3q4IgDoWoI6AGyE5557Lg899FD+v//v/0ttbW1uu+223i6pWy1btqzd6StXrkxjY2MPV9PWoEGDMmDAgN4uAwA2iqAOABvhtttuy4gRI7Lnnnvmwx/+cJugvq5zsefNm5exY8fmJz/5SZLk1FNPzQ033JBk1XnWLX9aLF26NN/61rey5557Zvz48fnwhz+cq666KuVyuU1N//7v/55PfvKTmTRpUnbbbbcccsghueeee1q1ueGGGzJjxoyMHz8+U6dOzcyZM7No0aJWbQ499NB89KMfzSOPPJJDDjkkkyZNyoUXXlip/aqrrsq//uu/Zvr06ZkwYUKeeOKJJMkTTzyR448/Pn/913+dCRMm5IADDshdd9213n35n//5nzn++OPzwQ9+MOPHj8+ee+6Zc845J2+88Ualzfr2U3vnqP/P//xPPv/5z2eXXXbJ5MmTc/jhh+fhhx9u1eYnP/lJxo4dmwcffDCzZs3K+9///uy888457rjjsnDhwvXWDgBdyVfOALARbrvttuy9996pqanJRz/60fzwhz/M3LlzM3HixA1az6c+9am8/PLLuffee3Puuee2mlcul/OlL30pv//97/PJT34yO+64Y+6+++6ce+65eemll/K1r32t0vaSSy7JxRdfnMmTJ+f444/PwIED88c//jH3339/pk6dmiS5+OKLc8kll2TKlCn5zGc+k6eeeio//OEP89///d/54Q9/mIEDB1bW9+qrr+aYY47JjBkz8vGPfzx1dXWVeT/5yU+yfPnyHHzwwampqcmIESPy5z//OZ/5zGey5ZZb5phjjslmm22Wn//85znuuONy8cUXZ++9917nPvjFL36RN954I5/5zGfytre9LXPnzs3111+fF198MbNnz17vfmrPn//85xxyyCHZfPPN8/nPfz4DBgzIjTfemEMPPTTXX399Jk2a1Kr92WefneHDh+crX/lK/vKXv+Saa67JN7/5zXznO99Z72sBQFcR1AHgLXrkkUfy5JNP5vTTT0+S7Lrrrtlqq61y2223bXBQnzx5ct71rnfl3nvvzd/+7d+2mnfXXXfl/vvvz4knnlg5//qQQw7J8ccfn2uvvTaf+9znsvXWW+eZZ57JpZdemr333juzZ89OVdWbA+dajrwvXLgwl19+eaZOnZorrrii0uav/uqv8s1vfjO33nprDjzwwMpyDQ0NmTlzZj796U9Xps2bNy9J8uKLL+ZXv/pVamtrK/OOOOKIvP3tb8/NN9+cmpqaJMlnP/vZfOYzn8n555/fYVD/6le/msGDB1eef+pTn8o222yTCy+8MM8//3ze8Y53dLif2vOd73wnK1asyA9/+MOMGTMmSfKJT3wi++67b84777xcf/31rdq/7W1vy/e///2USqUkSXNzc6677rosXrw4w4YNW+/rAUBXMPQdAN6i2267LfX19Xnf+96XJCmVStlvv/1yxx13pKmpqcte5z/+4z9SXV2dQw89tNX0o446KuVyOf/xH/+RJLnzzjvT3Nyc4447rlVIb6ktSe67776sWLEihx12WKs2Bx10UIYOHZrf/e53rZarqanJAQcc0G5d++yzT6uQ/uqrr+b+++/PRz7ykSxZsiQLFy7MwoUL88orr2Tq1Kl5+umn89JLL61zO9cM6UuXLs3ChQszefLklMvl/M///E9Hu6hdTU1NuffeezN9+vRKSE+SUaNG5aMf/WgefPDBLFmypNUyBx98cGVfJcl73/veNDU15S9/+csGvz4AvFWOqAPAW9DU1JTbb78973vf+ypHmJNk4sSJ+f73v585c+ZUhppvrL/85S8ZNWpUhg4d2mr6dtttV5mfJM8++2yqqqoq09vz/PPPJ1l1BH1NNTU1GTNmTJtAuuWWW1aOjK9t9OjRrZ4/++yzKZfLueiii3LRRRe1u8yCBQuy5ZZbrrO22bNn59e//nVee+21VvPWDtSdsXDhwixbtizbbrttm3nbbbddmpub88ILL+Td7353Zfo73vGOVu2GDx+eJG3O3weA7iSoA8BbcP/996ehoSG33357br/99jbzb7vttkydOrXV0dk1NTc3d3eJXWLNo9zrm9eyTUcddVSmTZvW7jJbb711u9Obmppy5JFH5rXXXsvnP//5/NVf/VU222yzvPTSSzn11FN7bH+tPRKhRXsX7QOA7iKoA8BbcNttt6Wuri5nnHFGm3m/+tWv8qtf/SozZ86sHJFdvHhxqzbtDaVeV6h/5zvfmTlz5mTJkiWtjqo/+eSTlfnJqhDc3NycJ554IjvuuGO762o5Yvzkk0+2Gg7e2NiYefPmZcqUKevc5vVpWd/AgQM3eD2PP/54nn766Xz729/OJz7xicr0e++9t03bde2ntdXW1mbIkCF56qmn2sx78sknU1VVlbe//e0bVCcA9ATnqAPABnrjjTfyy1/+Mh/84Aez7777tvlzyCGH5PXXX8+vf/3rvPOd70x1dXUeeOCBVuv44Q9/2Ga9Q4YMSdJ2mPUHPvCBNDU1VW5L1uJf//VfUyqV8oEPfCBJMn369FRVVeXSSy9tcwS65YjwlClTMnDgwFx33XWtjhL/+Mc/zuLFi7Pnnnu+xb2S1NXV5a//+q9z44035uWXX24zv6PbnLUcyV6zpnK5nGuvvbZN23Xtp7VVV1dnjz32yF133dXq9IT58+fnZz/7WXbdddc2pxMAQBE4og4AG+jXv/51Xn/99ey1117tzt95551TW1ubW2+9Nfvtt1/23XffXH/99SmVShkzZkx++9vfZsGCBW2W22mnnZKsukXY1KlTU11dnRkzZmSvvfbK+973vvzzP/9z/vKXv2Ts2LG59957c9ddd+Xwww+vDCffZptt8sUvfjHf/e5389nPfjb77LNPampq8t///d8ZNWpUTjrppNTW1ubYY4/NJZdcks9//vPZa6+98tRTT+UHP/hBJkyYkI9//OMbtW++8Y1v5LOf/Ww+9rGP5eCDD86YMWMyf/78PPzww3nxxRdz6623trvcX/3VX2XrrbfOt7/97bz00ksZOnRo/t//+3/thvF17af2nHjiibnvvvvy2c9+Np/97GdTXV2dG2+8MY2NjfnHf/zHjdpWAOgugjoAbKBbb701gwYNyh577NHu/Kqqqnzwgx/MbbfdlldeeSWnnXZaVq5cmR/96EepqanJvvvum5NPPjkf/ehHWy23zz775NBDD83tt9+eW2+9NeVyOTNmzEhVVVUuu+yyzJ49O3fccUd+8pOf5J3vfGdOPvnkHHXUUa3WccIJJ2T06NG5/vrr88///M8ZMmRIxo4d2+pWZn/3d3+X2traXH/99Zk1a1ZGjBiRgw8+OP/wD//Q6h7qb8X222+fm2++OZdcckluueWWvPrqq6mtrc173vOeHHfccetcbuDAgfne976Xs88+O5dffnkGDRqUvffeO4ccckib27Ctaz+1593vfnduuOGGXHDBBbn88stTLpczceLEnHfeeW3uoQ4ARVEquzoKAAAAFIZz1AEAAKBABHUAAAAoEEEdAAAACqRbg/oDDzyQL37xi5k6dWrGjh2bO++8c73L/P73v8/++++f8ePHZ++9985PfvKTNm1uuOGG7LXXXpkwYUIOOuigzJ07tzvKBwAAgB7XrUF96dKlGTt2bL7xjW90qv1zzz2XY489Nu973/vy7//+7zn88MNz2mmn5e677660ueOOOzJr1qwcd9xxueWWWzJu3LgcffTR7d7mBgAAAPqaHrvq+9ixY3PppZdm+vTp62xz3nnn5Xe/+11+9rOfVab9/d//fRYtWpSrrroqSXLQQQdlwoQJOeOMM5Ikzc3N2XPPPXPooYfmC1/4QvduBAAAAHSzQp2j/vDDD2f33XdvNW3q1Kl5+OGHkySNjY159NFHM2XKlMr8qqqqTJkyJQ899FBPlgoAAADdolBBff78+amvr281rb6+PkuWLMkbb7yRV155JU1NTamrq2vVpq6uLvPnz+/JUgEAAKBbDOjtAnrTwoWL0zMD/zvvX+59Jj/6r7+kqZ26qkvJp3d5Z76wxzY9Xxh0s1Ipqa0dVsj3JXQ1/Z3+RH+nP9Hf6UhL/+iMQgX1+vr6NkfG58+fn6FDh2bw4MGpqqpKdXV1mwvHLViwoM2R+M5obk7h3kD7jBuVK+Y8k+Z26qoqJR8eNyrNzT1fF3S3UmnVv0V8X0JX09/pT/R3+hP9nY609I/OKNTQ95133jn3339/q2n33Xdfdt555yRJTU1Ndtppp8yZM6cyv7m5OXPmzMnkyZN7stRus/UWQ3LaPjukao3/xKrSqj+n7bNDxmwxpPeKAwAAoNt1a1B//fXX89hjj+Wxxx5LksybNy+PPfZYnn/++STJBRdckJNPPrnS/tOf/nSee+65nHvuuXniiSdyww035Oc//3mOOOKISpsjjzwyN910U2655ZY88cQTOfPMM7Ns2bIccMAB3bkpPepj47fK9YfuUnn+mV3emR8fuVs+Nn6rXqwKAACAntCtQ98feeSRHHbYYZXns2bNSpLsv//++da3vpWGhoa88MILlfljxozJ5ZdfnlmzZuXaa6/NVlttlbPPPjvTpk2rtNlvv/2ycOHCzJ49Ow0NDdlxxx1z5ZVXvqWh70U2+m1vHjn/4h7vyuCB1b1YDQAAAD2lx+6jXkTz5xf3Ig/LVjTlA7PvTZLcffwegjqbvFIpqa8fVuj3JXQV/Z3+RH+nP9Hf6UhL/+iMQp2jDgAAAP2doA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFMqAnXuSGG27IVVddlYaGhowbNy6nn356Jk6c2G7bQw89NH/4wx/aTN9zzz3zL//yL0mSU089Nbfcckur+VOnTs1VV13V9cUDAABAD+r2oH7HHXdk1qxZmTlzZiZNmpRrrrkmRx99dH7xi1+krq6uTfuLL744K1asqDx/9dVX87d/+7fZd999W7WbNm1aZs2aVXleU1PTfRsBAAAAPaTbh75fffXVOfjgg3PggQdm++23z8yZMzN48ODcfPPN7bZ/29velpEjR1b+3HvvvRk8eHCboF5TU9Oq3YgRI7p7UwAAAKDbdesR9cbGxjz66KM59thjK9OqqqoyZcqUPPTQQ51ax80335wZM2Zks802azX9D3/4Q3bfffcMHz4873//+3PiiSdmiy222KD6SqUNat6j1iytVCp2rdAVWvq4vk5/oL/Tn+jv9Cf6Ox3ZkH7RrUH9lVdeSVNTU5sh7nV1dXnyySfXu/zcuXPz+OOP55/+6Z9aTZ82bVr23nvvjB49Os8991wuvPDCHHPMMbnxxhtTXV3d6frq6oZ1um1PW9q4svK4tm5oNqvpkcsJQK8r8vsSupr+Tn+iv9Of6O9srEKnvx//+MfZYYcd2lx4bsaMGZXHY8eOzdixYzN9+vTKUfbOWrBgccrlLiu3Sy1rbKo8XrhgSZYO7PwXENAXlUqrfqkV+X0JXUV/pz/R3+lP9Hc60tI/OqNbg/oWW2yR6urqLFiwoNX0BQsWpL6+vsNlly5dmttvvz3HH3/8el9nzJgx2WKLLfLMM89sUFAvl1PYN9CaZRW5Tuhq+jv9if5Of6K/05/o72ysbr2YXE1NTXbaaafMmTOnMq25uTlz5szJ5MmTO1z2F7/4RRobG/Pxj398va/z4osv5tVXX83IkSM3umYAAADoTd0+9P3II4/MKaeckvHjx2fixIm55pprsmzZshxwwAFJkpNPPjlbbrllTjrppFbL/fjHP8706dPbXCDu9ddfzyWXXJIPf/jDqa+vz3PPPZfzzjsv22yzTaZNm9bdmwMAAADdqtuD+n777ZeFCxdm9uzZaWhoyI477pgrr7yyMvT9hRdeSFVV6wP7Tz75ZB588MF8//vfb7O+6urqPP744/npT3+axYsXZ9SoUdljjz1ywgknuJc6AAAAfV6pXO6/Z0/Mn1/cizwsW9GUD8y+N0ly9/F7ZLCLybGJK5WS+vphhX5fQlfR3+lP9Hf6E/2djrT0j87o1nPUAQAAgA0jqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECB9EhQv+GGG7LXXntlwoQJOeiggzJ37tx1tv3JT36SsWPHtvozYcKEVm3K5XIuuuiiTJ06NRMnTswRRxyRp59+upu3AgAAALpftwf1O+64I7Nmzcpxxx2XW265JePGjcvRRx+dBQsWrHOZoUOH5p577qn8+c1vftNq/hVXXJHrrrsuZ555Zm666aYMGTIkRx99dJYvX97dmwMAAADdqtuD+tVXX52DDz44Bx54YLbffvvMnDkzgwcPzs0337zOZUqlUkaOHFn5U19fX5lXLpdz7bXX5ktf+lKmT5+ecePG5dxzz83LL7+cO++8s7s3BwAAALrVgO5ceWNjYx599NEce+yxlWlVVVWZMmVKHnrooXUut3Tp0nzoQx9Kc3Nz3vOe9+Qf/uEf8u53vztJMm/evDQ0NGTKlCmV9sOGDcukSZPy0EMPZcaMGZ2ur1R6CxvVQ9YsrVQqdq3QFVr6uL5Of6C/05/o7/Qn+jsd2ZB+0a1B/ZVXXklTU1Pq6upaTa+rq8uTTz7Z7jLbbrttzjnnnIwdOzaLFy/O97///Xz605/O7bffnq222ioNDQ2Vday9zvnz529QfXV1wzaofU9a2riy8ri2bmg2q+nW/yoojCK/L6Gr6e/0J/o7/Yn+zsYqXPqbPHlyJk+e3Or5fvvtlx/96Ec58cQTu/S1FixYnHK5S1fZZZY1NlUeL1ywJEsHVvdiNdD9SqVVv9SK/L6ErqK/05/o7/Qn+jsdaekfndGtQX2LLbZIdXV1mwvHLViwoNV55x0ZOHBgdtxxxzz77LNJkpEjR1bWMWrUqFbrHDdu3AbVVy6nsG+gNcsqcp3Q1fR3+hP9nf5Ef6c/0d/ZWN16MbmamprstNNOmTNnTmVac3Nz5syZ0+qoeUeampry+OOPVwL66NGjM3LkyFbrXLJkSf74xz92ep0AAABQVN0+9P3II4/MKaeckvHjx2fixIm55pprsmzZshxwwAFJkpNPPjlbbrllTjrppCTJJZdckp133jnbbLNNFi1alKuuuirPP/98DjrooCSrrgh/2GGH5bLLLss222yT0aNH56KLLsqoUaMyffr07t4cAAAA6FbdHtT322+/LFy4MLNnz05DQ0N23HHHXHnllZWh7y+88EKqqt48sL9o0aKcfvrpaWhoyIgRI7LTTjvlRz/6UbbffvtKm2OOOSbLli3LGWeckUWLFmXXXXfNlVdemUGDBnX35gAAAEC3KpXL/ffsifnzi3uRh2UrmvKB2fcmSe4+fo8MdjE5NnGlUlJfP6zQ70voKvo7/Yn+Tn+iv9ORlv7RGd16jjoAAACwYQR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKBBBHQAAAApEUAcAAIACEdQBAACgQAR1AAAAKJAeCeo33HBD9tprr0yYMCEHHXRQ5s6du862N910Uz772c9mt912y2677ZYjjjiiTftTTz01Y8eObfXn6KOP7u7NAAAAgG43oLtf4I477sisWbMyc+bMTJo0Kddcc02OPvro/OIXv0hdXV2b9r///e8zY8aM7LLLLqmpqcmVV16Zo446Krfffnu23HLLSrtp06Zl1qxZlec1NTXdvSkAAADQ7br9iPrVV1+dgw8+OAceeGC23377zJw5M4MHD87NN9/cbvsLLrgghxxySHbcccdst912Ofvss9Pc3Jw5c+a0aldTU5ORI0dW/owYMaK7NwUAAAC6XbceUW9sbMyjjz6aY489tjKtqqoqU6ZMyUMPPdSpdSxbtiwrV65sE8T/8Ic/ZPfdd8/w4cPz/ve/PyeeeGK22GKLDaqvVNqg5j1qzdJKpWLXCl2hpY/r6/QH+jv9if5Of6K/05EN6RfdGtRfeeWVNDU1tRniXldXlyeffLJT6zj//PMzatSoTJkypTJt2rRp2XvvvTN69Og899xzufDCC3PMMcfkxhtvTHV1dafrq6sb1um2PW1p48rK49q6odmsptvPUoBCKPL7Erqa/k5/or/Tn+jvbKxCp79/+Zd/yR133JFrr702gwYNqkyfMWNG5XHLxeSmT59eOcreWQsWLE653KUld5lljU2VxwsXLMnSgZ3/AgL6olJp1S+1Ir8voavo7/Qn+jv9if5OR1r6R2d0a1DfYostUl1dnQULFrSavmDBgtTX13e47FVXXZV/+Zd/ydVXX51x48Z12HbMmDHZYost8swzz2xQUC+XU9g30JplFblO6Gr6O/2J/k5/or/Tn+jvbKxuvZhcTU1Ndtppp1YXgmu5MNzkyZPXudwVV1yR7373u7nyyiszYcKE9b7Oiy++mFdffTUjR47skroBAACgt3T70Pcjjzwyp5xySsaPH5+JEyfmmmuuybJly3LAAQckSU4++eRsueWWOemkk5KsGu4+e/bsXHDBBXnnO9+ZhoaGJMlmm22WzTffPK+//nouueSSfPjDH059fX2ee+65nHfeedlmm20ybdq07t4cAAAA6FbdHtT322+/LFy4MLNnz05DQ0N23HHHXHnllZWh7y+88EKqqt48sP+jH/0oK1asyPHHH99qPV/5ylfy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SXLuuedmypQpufPOOzNjxoxO17ZsRdM6O0pvW7aiqdXjrihzWVNzlq9sSuPKgm70Rli+srndx/QN/v/6tvuffiU/+q+/tBlG+pld35n3bbNFb5dXOEXr7w1LOvjQVF41v7fqLNq+SvT3DdFqX2XVRV57e18Vub8XVRHfh0VlX63f24YM7PBC0G8bMvAt7btyyqsyU3Oxc866vihst2253H1RtbGxMTvvvHNmz55dCdVJcsopp2TRokW57LLL2izzwQ9+MEcccUSOOOKIyrTZs2fnzjvvzK233prnnnsu06dPz09/+tPsuOOOlTaf+9znMm7cuJx22mmdrm/8N/5flixf+dY2DgAAADpp6KABeWTmhzvVtluHvr/yyitpampKXV1dq+l1dXWZP39+u8vMnz8/9fX162zf0NBQmdbZdQIAAEBf0a+v+v6LL76vsEPfk1VDI2rrhmbhgiVdUueypuY80bBko4a+L1/ZnJNv/Z8kybkff08GDeiR6xH2SUXdV0Wtq1RKhg0bksWLlxXmfVnEfVW0mq75w3N5aN5r7Z6eU0oyefSIHP7XY3q6rIqi7a8WRevvv3/mlfzwwdbDucvlGM69liL396L19SLvq6L296L9HxZZkfdV0X6+F3VfNSxZnvuffiULl65I7WYD8/53bdHqmlMbqmZAKduPGprBVcXYvnXZkKHv3RrUt9hii1RXV7e5cNyCBQvaHDVvUV9f3+bI+JrtR44cWZk2atSoVm3GjRu3QfUNHlhdiDfQupRKyWY1A7K0i+osV5UyaEB1Sumac2YGDagqzJu96Iq6r4pW1+CB1VleXZx61lS0fZUUo6aRQ2vWfa5ZadX83q6xRRH215qK1N8/sF1dxo0amnvXuK/0HtvWujDnWvpKfy9CXy/yvuoL/b0I/4d9RRH3VZF+vq+pSPtq9NuG5JM7D+my9dUMqMrgAdUZXMD9vqYNCerduiU1NTXZaaedMmfOnMq05ubmzJkzJ5MnT253mZ133jn3339/q2n33Xdfdt555yTJ6NGjM3LkyFbrXLJkSf74xz+uc50AdI8p29Z2eGGmPdwmsc8YNWxQ9p/49nx+922y/8S3Fyq0FIX+3nlF31f6O1B03f6Vw5FHHpmbbropt9xyS5544omceeaZWbZsWQ444IAkycknn5wLLrig0v6www7L3Xffne9///t54okn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AAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgQjqAAAAUCCCOgAAABSIoA4AAAAFIqgDAABAgXRbUL/sssvy6U9/OpMmTcp73/veTi1TLpdz0UUXZerUqZk4cWKOOOKIPP30063avPrqqznppJOyyy675L3vfW++9rWv5fXXX++GLQAAAICe121BfcWKFdl3333zmc98ptPLXHHFFbnuuuty5pln5qabbsqQIUNy9NFHZ/ny5ZU2X/3qV/N///d/ufrqq/O9730v//mf/5kzzjijOzYBAAAAely3BfXjjz8+RxxxRHbYYYdOtS+Xy7n22mvzpS99KdOnT8+4ceNy7rnn5uWXX86dd96ZJHniiSdy99135+yzz64cqT/ttNNy++2356WXXuquTQEAAIAeM6C3C2gxb968NDQ0ZMqUKZVpw4YNy6RJk/LQQw9lxowZeeihhzJ8+PBMmDCh0mbKlCmpqqrK3Llzs/fee2/Qa1ZVJeVyl21ClyuVVv1b9DqhK+jv9Cf6O/2J/k5/or/TkZb+0RmFCeoNDQ1Jkrq6ulbT6+rqMn/+/CTJ/PnzU1tb22r+gAEDMmLEiMryG6K2dthbrLZn9ZU6oSvo7/Qn+jv9if5Of6K/s7E2KKiff/75ueKKKzpsc8cdd2S77bbbqKIAAACgv9qgoH7UUUdl//3377DNmDFj3lIhI0eOTJIsWLAgo0aNqkxfsGBBxo0blySpr6/PwoULWy23cuXKvPbaa5XlAQAAoC/boKBeW1vbZuh5Vxk9enRGjhyZOXPmZMcdd0ySLFmyJH/84x8rV46fPHlyFi1alEceeSTjx49Pktx///1pbm7OxIkTu6UuAAAA6EnddtX3559/Po899lief/75NDU15bHHHstjjz3W6p7n++67b371q18lSUqlUg477LBcdtllueuuu/KnP/0pJ598ckaNGpXp06cnSbbbbrtMmzYtp59+eubOnZsHH3wwZ511VmbMmJEtt9yyuzYFAAAAeky3XUxu9uzZueWWWyrPP/GJTyRJrr322rzvfe9Lkjz11FNZvHhxpc0xxxyTZcuW5YwzzsiiRYuy66675sorr8ygQYMqbc4///ycddZZOfzww1NVVZV99tknp512WndtBgAAAPSoUrnsxgEAAABQFN029B0AAADYcII6AAAAFIigDgAAAAUiqAMAAECBCOoFdsMNN2SvvfbKhAkTctBBB2Xu3Lm9XRJ0uYsvvjhjx45t9Wffffft7bKgSzzwwAP54he/mKlTp2bs2LG58847W80vl8u56KKLMnXq1EycODFHHHFEnn766d4pFjbS+vr7qaee2ubn/dFHH91L1cJbd/nll+fAAw/M5MmTs/vuu+fLX/5ynnzyyVZtli9fnpkzZ+Z973tfJk+enL/7u7/L/Pnze6li+iJBvaDuuOOOzJo1K8cdd1xuueWWjBs3LkcffXQWLFjQ26VBl3v3u9+de+65p/LnBz/4QW+XBF1i6dKlGTt2bL7xjW+0O/+KK67IddddlzPPPDM33XRThgwZkqOPPjrLly/v4Uph462vvyfJtGnTWv28v/DCC3uwQugaf/jDH3LIIYfkpptuytVXX52VK1fm6KOPztKlSyttzjnnnPzmN7/Jd77znVx33XV5+eWX85WvfKUXq6av6bb7qLNxrr766hx88ME58MADkyQzZ87Mb3/729x88835whe+0MvVQdeqrq7OyJEje7sM6HJ77rln9txzz3bnlcvlXHvttfnSl76U6dOnJ0nOPffcTJkyJXfeeWdmzJjRk6XCRuuov7eoqanx854+76qrrmr1/Fvf+lZ23333PProo9ltt92yePHi3HzzzTn//POz++67J1kV3Pfbb788/PDD2XnnnXuhavoaR9QLqLGxMY8++mimTJlSmVZVVZUpU6bkoYce6sXKoHs888wzmTp1av7mb/4mJ510Up5//vneLgm63bx589LQ0NDqZ/2wYcMyadIkP+vZZP3hD3/I7rvvng9/+MP5xje+kVdeeaW3S4KNtnjx4iTJiBEjkiSPPPJIVqxY0ern+3bbbZd3vOMdefjhh3ujRPogR9QL6JVXXklTU1Pq6upaTa+rq2tz/gv0dRMnTsysWbOy7bbbpqGhIZdeemkOOeSQ3HbbbRk6dGhvlwfdpqGhIUna/VnvPEY2RdOmTcvee++d0aNH57nnnsuFF16YY445JjfeeGOqq6t7uzx4S5qbm3POOedkl112yQ477JAkmT9/fgYOHJjhw4e3altXV1f52Q/rI6gDvWrNYZLjxo3LpEmT8qEPfSg///nPc9BBB/ViZQB0pTVP52i5mNz06dMrR9mhL5o5c2b+/Oc/u74OXc7Q9wLaYostUl1d3ebCcQsWLEh9fX0vVQU9Y/jw4XnXu96VZ599trdLgW7Vcp6un/X0V2PGjMkWW2yRZ555prdLgbfkm9/8Zn7729/mmmuuyVZbbVWZXl9fnxUrVmTRokWt2i9YsMA1Gug0Qb2AampqstNOO2XOnDmVac3NzZkzZ04mT57ci5VB93v99dfz3HPP+UXGJm/06NEZOXJkq5/1S5YsyR//+Ec/6+kXXnzxxbz66qt+3tPnlMvlfPOb38yvfvWrXHPNNRkzZkyr+ePHj8/AgQNb/Xx/8skn8/zzz7uQHJ1m6HtBHXnkkTnllFMyfvz4TJw4Mddcc02WLVuWAw44oLdLgy717W9/Ox/60Ifyjne8Iy+//HIuvvjiVFVV5aMf/WhvlwYb7fXXX281OmTevHl57LHHMmLEiLzjHe/IYYcdlssuuyzbbLNNRo8enYsuuiijRo2qXAUe+pKO+vuIESNyySWX5MMf/nDq6+vz3HPP5bzzzss222yTadOm9WLVsOFmzpyZn/3sZ/nud7+bzTffvHLe+bBhwzJ48OAMGzYsBx54YL71rW9lxIgRGTp0aM4+++xMnjxZUKfTSuVyudzbRdC+66+/PldddVUaGhqy44475rTTTsukSZN6uyzoUn//93+fBx54IK+++mpqa2uz66675u///u+z9dZb93ZpsNF+//vf57DDDmszff/998+3vvWtlMvlzJ49OzfddFMWLVqUXXfdNd/4xjey7bbb9kK1sHE66u9nnnlmjjvuuPzP//xPFi9enFGjRmWPPfbICSec4FQP+pyxY8e2O33WrFmVg2rLly/Pt771rdx+++1pbGzM1KlT841vfMMIEjpNUAcAAIACcY46AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIII6AAAAFIigDgAAAAUiqAMAAECBCOoAAABQIP8/sup2cLP1wSEAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.graphics.tsaplots import plot_pacf\n",
        "\n",
        "plot_pacf(data_boxcox_diff)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "L7gCU15hACMu",
        "outputId": "978e31f5-0465-493e-bfbd-39d0d445b6d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#**Fitting a SARIMA Model**\n",
        "##Parameters 2,1,9,, 0,1,1,12 Based on testing"
      ],
      "metadata": {
        "id": "4XVG6aeJdaAO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from statsmodels.tsa.statespace.sarimax import SARIMAX\n",
        "model = SARIMAX(data_boxcox_diff, order=(3,1,2), seasonal_order=(0,1,1,12))\n",
        "model_fit = model.fit()\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "fjHyybzVneyT"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " # Recover original time series\n",
        "y_hat_ar = data_boxcox_diff.copy()\n",
        "y_hat_ar['ar_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(),data_boxcox_diff.index.max())\n",
        "y_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox_diff'].cumsum()\n",
        "y_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox'].add(data_boxcox[0])\n",
        "y_hat_ar['ar_forecast'] = np.exp(y_hat_ar['ar_forecast_boxcox'])"
      ],
      "metadata": {
        "id": "ictil0D3oQqm"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot train, test and forecast\n",
        "plt.figure(figsize=(12,4))\n",
        "plt.plot(train['Andhra Pradesh'], label='Train')\n",
        "plt.plot(test['Andhra Pradesh'], label='Test')\n",
        "plt.plot(y_hat_ar['ar_forecast'][test.index.min():], label='Auto regression forecast')\n",
        "plt.legend(loc='best')\n",
        "plt.title('Auto Regression Method')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "7zhDq40NrfJq",
        "outputId": "adc38ad3-fd67-4784-95d4-d5d60cf705d1"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rmse = np.sqrt(mean_squared_error(test['Andhra Pradesh'], y_hat_ar['ar_forecast'][test.index.min():]))\n",
        "print('RMSE: %.3f' % rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ELfO2ABprhWM",
        "outputId": "fa3bda07-a289-446f-faa7-b26ec981c750"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 29.346\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mape = np.round(np.mean(np.abs(test['Andhra Pradesh'] - y_hat_ar['ar_forecast'][test.index.min():])/test['Andhra Pradesh']) * 100, 2)\n"
      ],
      "metadata": {
        "id": "8zUnnEgQrlCy"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QHe1YzOQrpFL",
        "outputId": "a4bac237-0eed-467d-f215-ff34154c9c61"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(16.53)"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "candidates = [((2,1,2),(1,1,1,12)),\n",
        "              ((2,1,9),(1,1,1,12)),\n",
        "              ((1,1,2),(0,1,1,12)),\n",
        "              ((3,1,2),(0,1,1,12))]\n",
        "\n",
        "for order, seas in candidates:\n",
        "    model = SARIMAX(data_boxcox, order=order, seasonal_order=seas)\n",
        "    results = model.fit(disp=False)\n",
        "    print(f\"order={order}, seasonal_order={seas}, AIC={results.aic}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_SogNxHXrqIP",
        "outputId": "df52ba6c-f9e0-45b3-c8f2-d03d01b6819a"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "order=(2, 1, 2), seasonal_order=(1, 1, 1, 12), AIC=-504.88446887340046\n",
            "order=(2, 1, 9), seasonal_order=(1, 1, 1, 12), AIC=-510.09881885835136\n",
            "order=(1, 1, 2), seasonal_order=(0, 1, 1, 12), AIC=-508.41467106509776\n",
            "order=(3, 1, 2), seasonal_order=(0, 1, 1, 12), AIC=-512.207642792264\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "future_predict = model_fit.predict(start =len(data1), end = (len(data1)) +24)\n",
        "future_predict= future_predict.cumsum()\n",
        "future_predict = future_predict.add(data_boxcox[0])\n",
        "future_predict =np.exp(future_predict)"
      ],
      "metadata": {
        "id": "EBFVoCvlsHBf"
      },
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "future_predict.plot()\n",
        "plt.title('Next 6 months prediction\\n', fontdict={'fontsize': 16, 'fontweight': 5,'color': 'Orange'})\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 724
        },
        "id": "43jYoV9nsUsM",
        "outputId": "954b636a-95b0-44b1-a766-6052b734bd3a"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
